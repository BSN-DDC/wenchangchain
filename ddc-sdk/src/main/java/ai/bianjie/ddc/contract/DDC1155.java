package ai.bianjie.ddc.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DDC1155 extends Contract {
    public static final String BINARY = "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b506080516153166200010060003960008181610cf401528181610d3401528181610efb0152610f3b01526153166000f3fe6080604052600436106102245760003560e01c8063715018a611610123578063b55bc617116100ab578063dd4670641161006f578063dd4670641461067e578063e985e9c51461069e578063ed09e87e146106be578063f242432a146106de578063f2fde38b146106fe57600080fd5b8063b55bc617146105e8578063b9f7fad914610608578063c5837d821461061e578063d302b0dc1461063e578063d7a78db81461065e57600080fd5b80639dc29fac116100f25780639dc29fac14610548578063a22cb46514610568578063a676296e14610588578063ac10118b146105a8578063b2dc5dc3146105c857600080fd5b8063715018a6146104d65780638129fc1c146104eb5780638d643054146105005780638da5cb5b1461052057600080fd5b806344d891df116101b15780635cb1c06f116101755780635cb1c06f146104295780636198e339146104495780636352211e146104695780636357035514610496578063685e8247146104b657600080fd5b806344d891df146103895780634e1273f4146103a95780634f1ef286146103d65780634f52d223146103e9578063569604691461040957600080fd5b8063293ec97c116101f8578063293ec97c146102ce5780632d0335ab146102fb5780632eb2c2d6146103325780633644e515146103525780633659cfe61461036957600080fd5b8062fdd58e1461022957806301ffc9a71461025c5780631b240bf01461028c57806325ed5b35146102ae575b600080fd5b34801561023557600080fd5b50610249610244366004613f8c565b61071e565b6040519081526020015b60405180910390f35b34801561026857600080fd5b5061027c610277366004613fcc565b61077a565b6040519015158152602001610253565b34801561029857600080fd5b506102ac6102a7366004614132565b6107af565b005b3480156102ba57600080fd5b506102ac6102c9366004614213565b6109b6565b3480156102da57600080fd5b506102ee6102e936600461427d565b610ab0565b60405161025391906142e6565b34801561030757600080fd5b506102496103163660046142f9565b6001600160a01b03166000908152610103602052604090205490565b34801561033e57600080fd5b506102ac61034d366004614314565b610b59565b34801561035e57600080fd5b506102496101045481565b34801561037557600080fd5b506102ac6103843660046142f9565b610cea565b34801561039557600080fd5b506102ac6103a43660046142f9565b610db2565b3480156103b557600080fd5b506103c96103c436600461441d565b610e08565b60405161025391906144bb565b6102ac6103e43660046144ce565b610ef1565b3480156103f557600080fd5b506102ac61040436600461459b565b610faa565b34801561041557600080fd5b506102ac61042436600461466b565b6111e3565b34801561043557600080fd5b506102ac6104443660046146d8565b6113d5565b34801561045557600080fd5b506102ac61046436600461427d565b6114dd565b34801561047557600080fd5b5061048961048436600461427d565b6115a8565b6040516102539190614764565b3480156104a257600080fd5b506102ac6104b1366004614777565b611614565b3480156104c257600080fd5b506102ac6104d136600461480f565b6117f4565b3480156104e257600080fd5b506102ac611927565b3480156104f757600080fd5b506102ac61195d565b34801561050c57600080fd5b506102ac61051b366004614865565b6119e0565b34801561052c57600080fd5b506097546040516001600160a01b039091168152602001610253565b34801561055457600080fd5b506102ac610563366004613f8c565b611a48565b34801561057457600080fd5b506102ac610583366004614895565b611ab9565b34801561059457600080fd5b506102ac6105a33660046148cc565b611ba2565b3480156105b457600080fd5b506102ac6105c336600461427d565b611cf8565b3480156105d457600080fd5b506102ac6105e336600461492a565b611d28565b3480156105f457600080fd5b506102ac61060336600461496d565b611ea4565b34801561061457600080fd5b5061010054610249565b34801561062a57600080fd5b506102ac6106393660046142f9565b611f36565b34801561064a57600080fd5b506102ac61065936600461427d565b611f8c565b34801561066a57600080fd5b506102ac61067936600461427d565b612001565b34801561068a57600080fd5b506102ac61069936600461427d565b612074565b3480156106aa57600080fd5b5061027c6106b93660046149bb565b61213c565b3480156106ca57600080fd5b506102ac6106d93660046149ee565b6121a9565b3480156106ea57600080fd5b506102ac6106f9366004614acd565b61235c565b34801561070a57600080fd5b506102ac6107193660046142f9565b61240a565b60006001600160a01b03831661074f5760405162461bcd60e51b815260040161074690614b25565b60405180910390fd5b50600081815260fb602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b0319821663bef53c1760e01b148061077457506301ffc9a760e01b6001600160e01b0319831614610774565b6107b8336124a2565b6107c0612583565b6107c9886124a2565b6107d2876124a2565b6107dc8888612657565b6003600090815261010660209081527f02029c55f9e39d554ef1956e7f946f5d20dd840a58a3da90e1a05d1aba8b2deb54604051610826928c918c918c918c918b918b9101614b69565b60405160208183030381529060405280519060200120905061084d896000868686866126da565b85511580159061085d5750865115155b6108c45760405162461bcd60e51b815260206004820152603260248201527f444443313135353a616d6f756e747320616e6420646463496473206d7573742060448201527131329033b932b0ba32b9103a3430b710181760711b6064820152608401610746565b85518751146108e55760405162461bcd60e51b815260040161074690614bc4565b60005b875181101561093f5761092f8a8a8a848151811061090857610908614bfb565b60200260200101518a858151811061092257610922614bfb565b602002602001015161288a565b61093881614c27565b90506108e8565b50876001600160a01b0316896001600160a01b031661095b3390565b6001600160a01b03167f044e6de8918fb5380e4f6e57e1b4a072ec1aa7a3a9c305bd3d04bfbf229a55958a8a604051610995929190614c40565b60405180910390a46109ab338a8a8a8a8a612904565b505050505050505050565b6109bf336124a2565b6109c7612583565b6004600090815261010660209081527f1e9fb1d1436ad4ae7bc58a66f9ff57fc5fd06d9ebd02fed281ef31ee7949fd7c5460408051808401929092526001600160a01b03891682820152606082018890526080820187905260a08083018790528151808403909101815260c09092019052805191012090610a4d908790868686866126da565b610a578686612a97565b60006001600160a01b038716337f74148c91c470c301c48a4f330b37953d064c3741f6b84215c5e51cfae571a85888610a908b8261071e565b6040805192835260208301919091520160405180910390a4505050505050565b6060610abb82612b93565b600082815260fd602052604090208054610ad490614c65565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0090614c65565b8015610b4d5780601f10610b2257610100808354040283529160200191610b4d565b820191906000526020600020905b815481529060010190602001808311610b3057829003601f168201915b50505050509050919050565b610b61612583565b610b6a856124a2565b610b73846124a2565b610b7d8585612657565b610b878533612bf1565b815115801590610b975750825115155b610c095760405162461bcd60e51b815260206004820152603960248201527f444443313135353a616d6f756e747320616e6420646463496473206c656e677460448201527f68206d7573742062652067726561746572207468616e20302e000000000000006064820152608401610746565b8151835114610c2a5760405162461bcd60e51b815260040161074690614bc4565b60005b8351811015610c7757610c678686868481518110610c4d57610c4d614bfb565b602002602001015186858151811061092257610922614bfb565b610c7081614c27565b9050610c2d565b50836001600160a01b0316856001600160a01b0316610c933390565b6001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610ccd929190614c40565b60405180910390a4610ce3338686868686612904565b5050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d325760405162461bcd60e51b815260040161074690614c9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d64612c63565b6001600160a01b031614610d8a5760405162461bcd60e51b815260040161074690614ceb565b610d9381612c91565b60408051600080825260208201909252610daf91839190612cbb565b50565b6097546001600160a01b03163314610ddc5760405162461bcd60e51b815260040161074690614d37565b610de581612dff565b61010180546001600160a01b0319166001600160a01b0392909216919091179055565b60608151835114610e2b5760405162461bcd60e51b815260040161074690614bc4565b600083516001600160401b03811115610e4657610e46613fe9565b604051908082528060200260200182016040528015610e6f578160200160208202803683370190505b50905060005b8351811015610ee957610eba858281518110610e9357610e93614bfb565b6020026020010151858381518110610ead57610ead614bfb565b602002602001015161071e565b828281518110610ecc57610ecc614bfb565b602090810291909101015280610ee181614c27565b915050610e75565b509392505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610f395760405162461bcd60e51b815260040161074690614c9f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f6b612c63565b6001600160a01b031614610f915760405162461bcd60e51b815260040161074690614ceb565b610f9a82612c91565b610fa682826001612cbb565b5050565b610fb3336124a2565b610fbb612583565b610fc4876124a2565b610fcf335b88612e75565b6001600090815261010660209081527f9338693306232b448a0d8b70aaf6d02effece4e40c2a46a6f142865bf1c4ecb154604051611017928b918b918b918a918a9101614d6c565b60405160208183030381529060405280519060200120905061103e886001868686866126da565b86511580159061104e5750855115155b61106a5760405162461bcd60e51b815260040161074690614e02565b865186511461108b5760405162461bcd60e51b815260040161074690614bc4565b6101005487516000906001600160401b038111156110ab576110ab613fe9565b6040519080825280602002602001820160405280156110d4578160200160208202803683370190505b50905060005b8951811015611178576110ee600184614e5f565b92508282828151811061110357611103614bfb565b6020026020010181815250506111668b83838151811061112557611125614bfb565b60200260200101518c848151811061113f5761113f614bfb565b60200260200101518c858151811061115957611159614bfb565b6020026020010151612ed5565b8061117081614c27565b9150506110da565b506001600160a01b038a166000336001600160a01b03167f044e6de8918fb5380e4f6e57e1b4a072ec1aa7a3a9c305bd3d04bfbf229a5595848d6040516111c0929190614c40565b60405180910390a46111d73360008c848d8c612904565b50505050505050505050565b6111ec336124a2565b6111f4612583565b6005600090815261010660209081527fa834c146e355490ead4d56c877861d17fc10d12708043d26a0e228bf41aa7c165460405161123a92899189918991899101614e72565b604051602081830303815290604052805190602001209050611261866000868686866126da565b84516000036112c15760405162461bcd60e51b815260206004820152602660248201527f444443313135353a646463496473206d757374206265206772656174657220746044820152653430b710181760d11b6064820152608401610746565b600085516001600160401b038111156112dc576112dc613fe9565b604051908082528060200260200182016040528015611305578160200160208202803683370190505b50905060005b865181101561137c576113378888838151811061132a5761132a614bfb565b6020026020010151612a97565b61134d88888381518110610ead57610ead614bfb565b82828151811061135f5761135f614bfb565b60209081029190910101528061137481614c27565b91505061130b565b5060006001600160a01b038816336001600160a01b03167f044e6de8918fb5380e4f6e57e1b4a072ec1aa7a3a9c305bd3d04bfbf229a559589856040516113c4929190614c40565b60405180910390a450505050505050565b6113de336124a2565b6113e6612583565b6113ef876124a2565b6113f833610fc9565b600080805261010660209081527f36b574eb542e18a2932b42c3f7b99e0cccde75c2d7e80ac19800931af8e17fa25460405161143e928a918c918b918a918a9101614eb0565b604051602081830303815290604052805190602001209050611465886001868686866126da565b60006101005460016114779190614e5f565b905061148589828a8a612ed5565b60408051828152602081018a90526001600160a01b038b169160009133917f74148c91c470c301c48a4f330b37953d064c3741f6b84215c5e51cfae571a858910160405180910390a46109ab3360008b848c8b612f75565b6114e5612583565b6114ee81613060565b6114f7816130c0565b6000611502826115a8565b90506000610105600084815260200190815260200160002060008360008151811061152f5761152f614bfb565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055336001600160a01b03167f8af3d40d6d540efc57e85305f7646c5e191c8c85b6759f43ddb0c8faf146eb458360405161159c91815260200190565b60405180910390a25050565b60008181526101076020908152604091829020805483518184028101840190945280845260609392830182828015610b4d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115eb5750505050509050919050565b61161c612583565b611625846124a2565b611630335b85612e75565b8251158015906116405750815115155b61165c5760405162461bcd60e51b815260040161074690614e02565b81518351146116ad5760405162461bcd60e51b815260206004820152601860248201527f444443313135353a6c656e677468206d69736d617463682e00000000000000006044820152606401610746565b6101005483516000906001600160401b038111156116cd576116cd613fe9565b6040519080825280602002602001820160405280156116f6578160200160208202803683370190505b50905060005b855181101561178d57611710600184614e5f565b92508282828151811061172557611725614bfb565b60200260200101818152505061177b8783838151811061174757611747614bfb565b602002602001015188848151811061176157611761614bfb565b602002602001015188858151811061115957611159614bfb565b8061178581614c27565b9150506116fc565b506001600160a01b0386166000336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb84896040516117d5929190614c40565b60405180910390a46117ec33600088848988612904565b505050505050565b6117fc612583565b61180582613060565b61180e82613165565b6118188333612bf1565b80516000036118695760405162461bcd60e51b815260206004820152601860248201527f444443313135353a43616e206e6f7420626520656d70747900000000000000006044820152606401610746565b600082815260fd60205260409020805461188290614c65565b1590506118d15760405162461bcd60e51b815260206004820152601b60248201527f444443313135353a616c726561647920696e697469616c697a656400000000006044820152606401610746565b600082815260fd602052604090206118e98282614f38565b50817fee1bb82f380189104b74a7647d26f2f35679780e816626ffcaec7cafb7288e468260405161191a91906142e6565b60405180910390a2505050565b6097546001600160a01b031633146119515760405162461bcd60e51b815260040161074690614d37565b61195b6000613207565b565b600054610100900460ff1680611976575060005460ff16155b6119925760405162461bcd60e51b815260040161074690614ff7565b600054610100900460ff161580156119b4576000805461ffff19166101011790555b6119bc613259565b6119c46132b8565b6119cc61331f565b8015610daf576000805461ff001916905550565b6097546001600160a01b03163314611a0a5760405162461bcd60e51b815260040161074690614d37565b806101066000846005811115611a2257611a22614b53565b6005811115611a3357611a33614b53565b81526020810191909152604001600020555050565b611a50612583565b611a5a8233612bf1565b611a648282612a97565b60006001600160a01b038316337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6284611a9d878261071e565b6040805192835260208301919091520160405180910390a45050565b611ac1612583565b611aca826124a2565b611ad43383612e75565b6001600160a01b0382163303611b365760405162461bcd60e51b815260206004820152602160248201527f444443313135353a73657474696e6720617070726f76616c20666f722073656c6044820152603360f91b6064820152608401610746565b33600081815260fc602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611bab336124a2565b611bb3612583565b611bbc886124a2565b611bc5876124a2565b611bce86613060565b611bd83389612e75565b611be28888612657565b6002600090815261010660209081527f8f2a15744a4cd3a653d2fe6d832f49691064146c636f72bf7410c96b3b22758f5460408051808401929092526001600160a01b038c8116838301528b166060830152608082018a905260a0820189905260c0820187905260e0808301879052815180840390910181526101009092019052805191012090611c78908a90868686866126da565b611c848989898961288a565b876001600160a01b0316896001600160a01b0316611c9f3390565b6001600160a01b03167f74148c91c470c301c48a4f330b37953d064c3741f6b84215c5e51cfae571a8588a8a604051611ce2929190918252602082015260400190565b60405180910390a46109ab338a8a8a8a8a612f75565b6097546001600160a01b03163314611d225760405162461bcd60e51b815260040161074690614d37565b61010455565b611d30612583565b611d3a8233612bf1565b8051600003611da15760405162461bcd60e51b815260206004820152602d60248201527f444443313135353a646463496473206c656e677468206d75737420626520677260448201526c32b0ba32b9103a3430b710181760991b6064820152608401610746565b600081516001600160401b03811115611dbc57611dbc613fe9565b604051908082528060200260200182016040528015611de5578160200160208202803683370190505b50905060005b8251811015611e4f57611e0a8484838151811061132a5761132a614bfb565b611e2084848381518110610ead57610ead614bfb565b828281518110611e3257611e32614bfb565b602090810291909101015280611e4781614c27565b915050611deb565b5060006001600160a01b038416336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8585604051611e97929190614c40565b60405180910390a4505050565b611eac612583565b611eb5846124a2565b611ebe3361162a565b6000610100546001611ed09190614e5f565b9050611ede85828686612ed5565b60408051828152602081018690526001600160a01b0387169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610ce333600087848887612f75565b6097546001600160a01b03163314611f605760405162461bcd60e51b815260040161074690614d37565b611f6981612dff565b61010280546001600160a01b0319166001600160a01b0392909216919091179055565b611f94612583565b611f9c61337e565b611fa58161344d565b600081815260ff60205260409020805460ff19169055336001600160a01b03167faddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f82604051611ff691815260200190565b60405180910390a250565b612009612583565b61201161337e565b61201a81613060565b600081815260ff60205260409020805460ff1916600117905561203a3390565b6001600160a01b03167f027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a3682604051611ff691815260200190565b61207c612583565b61208581613060565b61208e81613165565b612097816134b5565b60006120a2826115a8565b9050600161010560008481526020019081526020016000206000836000815181106120cf576120cf614bfb565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055336001600160a01b03167fabcf25e46f2d1f3313c34b3fe668d0d864272dd3fb5cda4624f4b4016dba4d5b8360405161159c91815260200190565b60006001600160a01b0383161580159061215e57506001600160a01b03821615155b61217a5760405162461bcd60e51b815260040161074690614b25565b506001600160a01b03918216600090815260fc6020908152604080832093909416825291909152205460ff1690565b6121b1612583565b6121ba336124a2565b6121c261337e565b60005b8251811015612320576121f08382815181106121e3576121e3614bfb565b6020026020010151613060565b61222c83828151811061220557612205614bfb565b602002602001015183838151811061221f5761221f614bfb565b6020026020010151613515565b60005b82828151811061224157612241614bfb565b60200260200101515181101561230d576122a683838151811061226657612266614bfb565b6020026020010151828151811061227f5761227f614bfb565b602002602001015185848151811061229957612299614bfb565b60200260200101516135fc565b6122fb8383815181106122bb576122bb614bfb565b602002602001015182815181106122d4576122d4614bfb565b60200260200101518584815181106122ee576122ee614bfb565b6020026020010151613655565b8061230581614c27565b91505061222f565b508061231881614c27565b9150506121c5565b50336001600160a01b03167fae5d688d69a142e9e10bc1a9208556d976c81cba3648a1250e32866d554b93c3838360405161159c929190615045565b612364612583565b61236d856124a2565b612376846124a2565b6123808585612657565b61238a8533612bf1565b6123968585858561288a565b836001600160a01b0316856001600160a01b03166123b13390565b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6286866040516123f4929190918252602082015260400190565b60405180910390a4610ce3338686868686612f75565b6097546001600160a01b031633146124345760405162461bcd60e51b815260040161074690614d37565b6001600160a01b0381166124995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610746565b610daf81613207565b6001600160a01b0381166124c85760405162461bcd60e51b815260040161074690614b25565b610102546040516395c2a8d960e01b81526001600160a01b038381166004830152909116906395c2a8d990602401602060405180830381865afa158015612513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253791906150b7565b610daf5760405162461bcd60e51b815260206004820152601f60248201527f444443313135353a6e6f74206120617661696c61626c65206163636f756e74006044820152606401610746565b610102546001600160a01b031663470cf0e0336040516001600160e01b031960e084901b811682526001600160a01b0392909216600482015230602482015260003590911660448201526064016020604051808303816000875af11580156125ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261391906150b7565b61195b5760405162461bcd60e51b815260206004820152601560248201527422222198989a9a9d3737903832b936b4b9b9b4b7b760591b6044820152606401610746565b6126618282613736565b80612671575061267182826137b6565b610fa65760405162461bcd60e51b815260206004820152603460248201527f444443313135353a4f6e6c79206f6e6520706c6174666f726d206f722063726f6044820152731cdccb5c1b185d199bdc9b48185c1c1c9bdd985b60621b6064820152608401610746565b6101045460405161190160f01b6020820152602281019190915260428101829052600090606201604051602081830303815290604052805190602001209050600061272582856137f1565b9050861561279357876001600160a01b0316816001600160a01b03161461278e5760405162461bcd60e51b815260206004820152601a60248201527f444443313135353a20696e76616c6964207369676e61747572650000000000006044820152606401610746565b61279d565b61279d8882612bf1565b8415806127aa5750844211155b6127f65760405162461bcd60e51b815260206004820152601a60248201527f444443313135353a2065787069726564207369676e61747572650000000000006044820152606401610746565b6001600160a01b03811660009081526101036020526040812080549161281b83614c27565b90915550506001600160a01b0381166000908152610103602052604090205486146128805760405162461bcd60e51b8152602060048201526015602482015274444443313135353a696e76616c6964206e6f6e636560581b6044820152606401610746565b5050505050505050565b61289382613060565b61289c82613165565b6128a78483836138b9565b600082815260fb602090815260408083206001600160a01b03888116855292528083208054858103909155918616835282208054919284926128ea908490614e5f565b909155506128fb905085858561395b565b610ce3836139ad565b6001600160a01b0384163b156117ec5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061294890899089908890889088906004016150d4565b6020604051808303816000875af1925050508015612983575060408051601f3d908101601f1916820190925261298091810190615132565b60015b612a2e5761298f61514f565b806308c379a0036129c857506129a361516b565b806129ae57506129ca565b8060405162461bcd60e51b815260040161074691906142e6565b505b60405162461bcd60e51b815260206004820152603360248201527f444443313135353a7472616e7366657220746f206e6f6e20455243313135355260448201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b6064820152608401610746565b6001600160e01b0319811663bc197c8160e01b14612a8e5760405162461bcd60e51b815260206004820181905260248201527f444443313135353a4552433131353552656365697665722072656a65637465646044820152606401610746565b50505050505050565b6001600160a01b038216612abd5760405162461bcd60e51b815260040161074690614b25565b612ac681612b93565b612ad082826135fc565b6000612adc838361071e565b90508061010960008481526020019081526020016000206000828254612b0291906151f4565b9091555050600082815260fb602090815260408083206001600160a01b0387168452825280832083905584835260ff8252808320805460ff191690556101099091528120549003612b7b57600082815260fd60205260408120612b6491613f22565b600082815260fe60205260409020805460ff191690555b612b858383613a29565b612b8e826139ad565b505050565b600081815260fe602052604090205460ff16610daf5760405162461bcd60e51b815260206004820152601760248201527f444443313135353a6e6f6e6578697374656e74206464630000000000000000006044820152606401610746565b612bfb828261213c565b80612c175750816001600160a01b0316816001600160a01b0316145b610fa65760405162461bcd60e51b815260206004820152601e60248201527f444443313135353a6e6f74206f776e6572206e6f7220617070726f76656400006044820152606401610746565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6097546001600160a01b03163314610daf5760405162461bcd60e51b815260040161074690614d37565b6000612cc5612c63565b9050612cd084613bae565b600083511180612cdd5750815b15612cee57612cec8484613c53565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16610ce357805460ff191660011781556040516001600160a01b0383166024820152612d6d90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052613c53565b50805460ff19168155612d7e612c63565b6001600160a01b0316826001600160a01b031614612df65760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610746565b610ce385613d3e565b6001600160a01b038116612e255760405162461bcd60e51b815260040161074690614b25565b6001600160a01b0381163b610daf5760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9b9bdd08184818dbdb9d1c9858dd60521b6044820152606401610746565b612e7f8282613736565b610fa65760405162461bcd60e51b815260206004820152602160248201527f444443313135353a6f6e6c79206f6e207468652073616d6520706c6174666f726044820152606d60f81b6064820152608401610746565b612edf8383613d7e565b600083815260fb602090815260408083206001600160a01b038816845290915281208054849290612f11908490614e5f565b9091555050600083815260fd60205260409020612f2e8282614f38565b5060008381526101096020908152604080832085905560fe9091529020805460ff19166001179055610100839055612f668484613655565b612f6f836139ad565b50505050565b6001600160a01b0384163b156117ec5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612fb99089908990889088908890600401615207565b6020604051808303816000875af1925050508015612ff4575060408051601f3d908101601f19168201909252612ff191810190615132565b60015b6130005761298f61514f565b6001600160e01b0319811663f23a6e6160e01b14612a8e5760405162461bcd60e51b815260206004820181905260248201527f444443313135353a4552433131353552656365697665722072656a65637465646044820152606401610746565b61306981612b93565b600081815260ff60208190526040909120541615610daf5760405162461bcd60e51b8152602060048201526014602482015273444443313135353a64697361626c65642064646360601b6044820152606401610746565b6130c981612b93565b60006130d4826115a8565b600083815261010560205260408120825192935091839082906130f9576130f9614bfb565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16610fa65760405162461bcd60e51b8152602060048201526016602482015275444443313135353a6e6f6e2d6c6f636b65642064646360501b6044820152606401610746565b61316e81612b93565b6000613179826115a8565b6000838152610105602052604081208251929350918390829061319e5761319e614bfb565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610fa65760405162461bcd60e51b8152602060048201526012602482015271444443313135353a6c6f636b65642064646360701b6044820152606401610746565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680613272575060005460ff16155b61328e5760405162461bcd60e51b815260040161074690614ff7565b600054610100900460ff161580156132b0576000805461ffff19166101011790555b6119cc613e1f565b600054610100900460ff16806132d1575060005460ff16155b6132ed5760405162461bcd60e51b815260040161074690614ff7565b600054610100900460ff1615801561330f576000805461ffff19166101011790555b613317613e1f565b6119cc613e89565b600054610100900460ff1680613338575060005460ff16155b6133545760405162461bcd60e51b815260040161074690614ff7565b600054610100900460ff16158015613376576000805461ffff19166101011790555b6132b0613e1f565b610102546001600160a01b031663ed5cad643360006040518363ffffffff1660e01b81526004016133b092919061524c565b602060405180830381865afa1580156133cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f191906150b7565b61195b5760405162461bcd60e51b815260206004820152602760248201527f444443313135353a6e6f742061206f70657261746f7220726f6c65206f7220646044820152661a5cd8589b195960ca1b6064820152608401610746565b61345681612b93565b600081815260ff602081905260409091205416610daf5760405162461bcd60e51b815260206004820152601860248201527f444443313135353a6e6f6e2d64697361626c65642064646300000000000000006044820152606401610746565b6000818152610107602052604090205460018114610fa65760405162461bcd60e51b815260206004820152601c60248201527f4444432063616e206f6e6c792068617665206f6e65206f776e65722e000000006044820152606401610746565b6000613520836115a8565b905060005b8151811015612f6f5760005b83518110156135e95783818151811061354c5761354c614bfb565b60200260200101516001600160a01b031683838151811061356f5761356f614bfb565b60200260200101516001600160a01b0316146135d75760405162461bcd60e51b815260206004820152602160248201527f444443313135353a546865206f776e657220616c7265616479206578697374736044820152601760f91b6064820152608401610746565b806135e181614c27565b915050613531565b50806135f481614c27565b915050613525565b6000613608838361071e565b11610fa65760405162461bcd60e51b815260206004820152601c60248201527f444443313135353a696e73756666696369656e742062616c616e6365000000006044820152606401610746565b6000818152610108602090815260408083206001600160a01b0386168452909152812054908190036136d7575060008181526101076020908152604080832080546001810182558185528385200180546001600160a01b0319166001600160a01b03979097169687179055938352925461010882528383209483529390522055565b60008281526101076020526040902083906136f36001846151f4565b8154811061370357613703614bfb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b61010254604051633a723d1760e01b81526001600160a01b03848116600483015283811660248301526000921690633a723d17906044015b602060405180830381865afa15801561378b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137af91906150b7565b9392505050565b6101025460405162c21e5560e11b81526001600160a01b038481166004830152838116602483015260009216906301843caa9060440161376e565b600081516041146138445760405162461bcd60e51b815260206004820181905260248201527f444443313135353a696e76616c6964207369676e6174757265206c656e6774686044820152606401610746565b602082810151604080850151606080870151835160008082529681018086528a9052951a928501839052840183905260808401819052909260019060a0016020604051602081039080840390855afa1580156138a4573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600081116139025760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9a5b9d985b1a5908185b5bdd5b9d60521b6044820152606401610746565b8061390d848461071e565b1015612b8e5760405162461bcd60e51b815260206004820152601c60248201527f444443313135353a696e73756666696369656e742062616c616e6365000000006044820152606401610746565b6000613967848361071e565b90508060000361398a5761397b8483613a29565b6139858383613655565b612f6f565b826001600160a01b0316846001600160a01b031614612f6f57612f6f8383613655565b610101546001600160a01b031663ef18e3c9336040516001600160e01b031960e084901b811682526001600160a01b03929092166004820152600035909116602482015260448101849052606401600060405180830381600087803b158015613a1557600080fd5b505af1158015610ce3573d6000803e3d6000fd5b6000818152610108602090815260408083206001600160a01b03861684528252808320548484526101079092529091208054613a67906001906151f4565b81548110613a7757613a77614bfb565b600091825260208083209091015484835261010790915260409091206001600160a01b0390911690613aaa6001846151f4565b81548110613aba57613aba614bfb565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055848252610108815260408083209387168352838252808320548684526101079092528220805491939291613b18906001906151f4565b81548110613b2857613b28614bfb565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220949094558581526101088452818120928716815291835280822082905584825261010790925220805480613b8757613b87615287565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b803b613c125760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610746565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b613cb25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610746565b600080846001600160a01b031684604051613ccd919061529d565b600060405180830381855af49150503d8060008114613d08576040519150601f19603f3d011682016040523d82523d6000602084013e613d0d565b606091505b5091509150613d3582826040518060600160405280602781526020016152ba60279139613ee9565b95945050505050565b613d4781613bae565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60008111613dc75760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9a5b9d985b1a5908185b5bdd5b9d60521b6044820152606401610746565b600082815260fe602052604090205460ff1615610fa65760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e985b1c9958591e481b5a5b9d195960521b6044820152606401610746565b600054610100900460ff1680613e38575060005460ff16155b613e545760405162461bcd60e51b815260040161074690614ff7565b600054610100900460ff161580156119cc576000805461ffff19166101011790558015610daf576000805461ff001916905550565b600054610100900460ff1680613ea2575060005460ff16155b613ebe5760405162461bcd60e51b815260040161074690614ff7565b600054610100900460ff16158015613ee0576000805461ffff19166101011790555b6119cc33613207565b60608315613ef85750816137af565b825115613f085782518084602001fd5b8160405162461bcd60e51b815260040161074691906142e6565b508054613f2e90614c65565b6000825580601f10613f3e575050565b601f016020900490600052602060002090810190610daf91905b80821115613f6c5760008155600101613f58565b5090565b80356001600160a01b0381168114613f8757600080fd5b919050565b60008060408385031215613f9f57600080fd5b613fa883613f70565b946020939093013593505050565b6001600160e01b031981168114610daf57600080fd5b600060208284031215613fde57600080fd5b81356137af81613fb6565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561402457614024613fe9565b6040525050565b60006001600160401b0382111561404457614044613fe9565b5060051b60200190565b600082601f83011261405f57600080fd5b8135602061406c8261402b565b6040516140798282613fff565b83815260059390931b850182019282810191508684111561409957600080fd5b8286015b848110156140b4578035835291830191830161409d565b509695505050505050565b600082601f8301126140d057600080fd5b81356001600160401b038111156140e9576140e9613fe9565b604051614100601f8301601f191660200182613fff565b81815284602083860101111561411557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600080610100898b03121561414f57600080fd5b61415889613f70565b975061416660208a01613f70565b965060408901356001600160401b038082111561418257600080fd5b61418e8c838d0161404e565b975060608b01359150808211156141a457600080fd5b6141b08c838d0161404e565b965060808b01359150808211156141c657600080fd5b6141d28c838d016140bf565b955060a08b0135945060c08b0135935060e08b01359150808211156141f657600080fd5b506142038b828c016140bf565b9150509295985092959890939650565b600080600080600060a0868803121561422b57600080fd5b61423486613f70565b945060208601359350604086013592506060860135915060808601356001600160401b0381111561426457600080fd5b614270888289016140bf565b9150509295509295909350565b60006020828403121561428f57600080fd5b5035919050565b60005b838110156142b1578181015183820152602001614299565b50506000910152565b600081518084526142d2816020860160208601614296565b601f01601f19169290920160200192915050565b6020815260006137af60208301846142ba565b60006020828403121561430b57600080fd5b6137af82613f70565b600080600080600060a0868803121561432c57600080fd5b61433586613f70565b945061434360208701613f70565b935060408601356001600160401b038082111561435f57600080fd5b61436b89838a0161404e565b9450606088013591508082111561438157600080fd5b61438d89838a0161404e565b935060808801359150808211156143a357600080fd5b50614270888289016140bf565b600082601f8301126143c157600080fd5b813560206143ce8261402b565b6040516143db8282613fff565b83815260059390931b85018201928281019150868411156143fb57600080fd5b8286015b848110156140b45761441081613f70565b83529183019183016143ff565b6000806040838503121561443057600080fd5b82356001600160401b038082111561444757600080fd5b614453868387016143b0565b9350602085013591508082111561446957600080fd5b506144768582860161404e565b9150509250929050565b600081518084526020808501945080840160005b838110156144b057815187529582019590820190600101614494565b509495945050505050565b6020815260006137af6020830184614480565b600080604083850312156144e157600080fd5b6144ea83613f70565b915060208301356001600160401b0381111561450557600080fd5b614476858286016140bf565b600082601f83011261452257600080fd5b8135602061452f8261402b565b60405161453c8282613fff565b83815260059390931b850182019282810191508684111561455c57600080fd5b8286015b848110156140b45780356001600160401b0381111561457f5760008081fd5b61458d8986838b01016140bf565b845250918301918301614560565b600080600080600080600060e0888a0312156145b657600080fd5b6145bf88613f70565b965060208801356001600160401b03808211156145db57600080fd5b6145e78b838c0161404e565b975060408a01359150808211156145fd57600080fd5b6146098b838c01614511565b965060608a013591508082111561461f57600080fd5b61462b8b838c016140bf565b955060808a0135945060a08a0135935060c08a013591508082111561464f57600080fd5b5061465c8a828b016140bf565b91505092959891949750929550565b600080600080600060a0868803121561468357600080fd5b61468c86613f70565b945060208601356001600160401b03808211156146a857600080fd5b6146b489838a0161404e565b9550604088013594506060880135935060808801359150808211156143a357600080fd5b600080600080600080600060e0888a0312156146f357600080fd5b6146fc88613f70565b96506020880135955060408801356001600160401b038082111561471f57600080fd5b6146098b838c016140bf565b600081518084526020808501945080840160005b838110156144b05781516001600160a01b03168752958201959082019060010161473f565b6020815260006137af602083018461472b565b6000806000806080858703121561478d57600080fd5b61479685613f70565b935060208501356001600160401b03808211156147b257600080fd5b6147be8883890161404e565b945060408701359150808211156147d457600080fd5b6147e088838901614511565b935060608701359150808211156147f657600080fd5b50614803878288016140bf565b91505092959194509250565b60008060006060848603121561482457600080fd5b61482d84613f70565b92506020840135915060408401356001600160401b0381111561484f57600080fd5b61485b868287016140bf565b9150509250925092565b6000806040838503121561487857600080fd5b823560068110613fa857600080fd5b8015158114610daf57600080fd5b600080604083850312156148a857600080fd5b6148b183613f70565b915060208301356148c181614887565b809150509250929050565b600080600080600080600080610100898b0312156148e957600080fd5b6148f289613f70565b975061490060208a01613f70565b9650604089013595506060890135945060808901356001600160401b03808211156141c657600080fd5b6000806040838503121561493d57600080fd5b61494683613f70565b915060208301356001600160401b0381111561496157600080fd5b6144768582860161404e565b6000806000806080858703121561498357600080fd5b61498c85613f70565b93506020850135925060408501356001600160401b03808211156149af57600080fd5b6147e0888389016140bf565b600080604083850312156149ce57600080fd5b6149d783613f70565b91506149e560208401613f70565b90509250929050565b60008060408385031215614a0157600080fd5b82356001600160401b0380821115614a1857600080fd5b614a248683870161404e565b9350602091508185013581811115614a3b57600080fd5b8501601f81018713614a4c57600080fd5b8035614a578161402b565b604051614a648282613fff565b82815260059290921b8301850191858101915089831115614a8457600080fd5b8584015b83811015614abc57803586811115614aa05760008081fd5b614aae8c89838901016143b0565b845250918601918601614a88565b508096505050505050509250929050565b600080600080600060a08688031215614ae557600080fd5b614aee86613f70565b9450614afc60208701613f70565b9350604086013592506060860135915060808601356001600160401b0381111561426457600080fd5b602080825260149082015273444443313135353a7a65726f206164647265737360601b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b8781526001600160a01b0387811660208301528616604082015260e060608201819052600090614b9b90830187614480565b8281036080840152614bad8187614480565b60a0840195909552505060c0015295945050505050565b60208082526017908201527f444443313135353a6c656e677468206d69736d61746368000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201614c3957614c39614c11565b5060010190565b604081526000614c536040830185614480565b8281036020840152613d358185614480565b600181811c90821680614c7957607f821691505b602082108103614c9957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8681526000602060018060a01b0388168184015260c06040840152614d9460c0840188614480565b8381036060850152865180825282820190600581901b83018401848a0160005b83811015614de257601f19868403018552614dd08383516142ba565b94870194925090860190600101614db4565b505060808701989098525050505060a09091019190915250949350505050565b6020808252603a908201527f444443313135353a616d6f756e747320616e642064646355524973206c656e6760408201527f7468206d7573742062652067726561746572207468616e20302e000000000000606082015260800190565b8082018082111561077457610774614c11565b8581526001600160a01b038516602082015260a060408201819052600090614e9c90830186614480565b606083019490945250608001529392505050565b86815285602082015260018060a01b038516604082015260c060608201526000614edd60c08301866142ba565b60808301949094525060a00152949350505050565b601f821115612b8e57600081815260208120601f850160051c81016020861015614f195750805b601f850160051c820191505b818110156117ec57828155600101614f25565b81516001600160401b03811115614f5157614f51613fe9565b614f6581614f5f8454614c65565b84614ef2565b602080601f831160018114614f9a5760008415614f825750858301515b600019600386901b1c1916600185901b1785556117ec565b600085815260208120601f198616915b82811015614fc957888601518255948401946001909101908401614faa565b5085821015614fe75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6040815260006150586040830185614480565b6020838203818501528185518084528284019150828160051b85010183880160005b838110156150a857601f1987840301855261509683835161472b565b9486019492509085019060010161507a565b50909998505050505050505050565b6000602082840312156150c957600080fd5b81516137af81614887565b6001600160a01b0386811682528516602082015260a06040820181905260009061510090830186614480565b82810360608401526151128186614480565b9050828103608084015261512681856142ba565b98975050505050505050565b60006020828403121561514457600080fd5b81516137af81613fb6565b600060033d11156151685760046000803e5060005160e01c5b90565b600060443d10156151795790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156151a857505050505090565b82850191508151818111156151c05750505050505090565b843d87010160208285010111156151da5750505050505090565b6151e960208286010187613fff565b509095945050505050565b8181038181111561077457610774614c11565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090615241908301846142ba565b979650505050505050565b6001600160a01b0383168152604081016003831061527a57634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b634e487b7160e01b600052603160045260246000fd5b600082516152af818460208701614296565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200b3c02b22258606db755e418a2743172c99e103e651916a577d5c5df9d78831064736f6c63430008110033";

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_DDCURI = "ddcURI";

    public static final String FUNC_FREEZE = "freeze";

    public static final String FUNC_GETLATESTDDCID = "getLatestDDCId";

    public static final String FUNC_GETNONCE = "getNonce";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_LOCK = "lock";

    public static final String FUNC_METABURN = "metaBurn";

    public static final String FUNC_METABURNBATCH = "metaBurnBatch";

    public static final String FUNC_METASAFEBATCHTRANSFERFROM = "metaSafeBatchTransferFrom";

    public static final String FUNC_METASAFEMINT = "metaSafeMint";

    public static final String FUNC_METASAFEMINTBATCH = "metaSafeMintBatch";

    public static final String FUNC_METASAFETRANSFERFROM = "metaSafeTransferFrom";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFEMINT = "safeMint";

    public static final String FUNC_SAFEMINTBATCH = "safeMintBatch";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETAUTHORITYPROXYADDRESS = "setAuthorityProxyAddress";

    public static final String FUNC_SETCHARGEPROXYADDRESS = "setChargeProxyAddress";

    public static final String FUNC_SETMETASEPARATORARG = "setMetaSeparatorArg";

    public static final String FUNC_SETMETATYPEHASHARGS = "setMetaTypeHashArgs";

    public static final String FUNC_SETURI = "setURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYNCDDCOWNERS = "syncDDCOwners";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNFREEZE = "unFreeze";

    public static final String FUNC_UNLOCK = "unlock";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event ENTERBLACKLIST_EVENT = new Event("EnterBlacklist", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EXITBLACKLIST_EVENT = new Event("ExitBlacklist", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOCKLIST_EVENT = new Event("Locklist", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event METATRANSFERBATCH_EVENT = new Event("MetaTransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event METATRANSFERSINGLE_EVENT = new Event("MetaTransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETURI_EVENT = new Event("SetURI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SYNCDDCOWNERS_EVENT = new Event("SyncDDCOwners", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicArray<Address>>>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNLOCKLIST_EVENT = new Event("UnLocklist", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected DDC1155(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DDC1155(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DDC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DDC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AdminChangedEventResponse>() {
            @Override
            public AdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINCHANGED_EVENT, log);
                AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BeaconUpgradedEventResponse>() {
            @Override
            public BeaconUpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
                BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public List<EnterBlacklistEventResponse> getEnterBlacklistEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ENTERBLACKLIST_EVENT, transactionReceipt);
        ArrayList<EnterBlacklistEventResponse> responses = new ArrayList<EnterBlacklistEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            EnterBlacklistEventResponse typedResponse = new EnterBlacklistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EnterBlacklistEventResponse> enterBlacklistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EnterBlacklistEventResponse>() {
            @Override
            public EnterBlacklistEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ENTERBLACKLIST_EVENT, log);
                EnterBlacklistEventResponse typedResponse = new EnterBlacklistEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EnterBlacklistEventResponse> enterBlacklistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ENTERBLACKLIST_EVENT));
        return enterBlacklistEventFlowable(filter);
    }

    public List<ExitBlacklistEventResponse> getExitBlacklistEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXITBLACKLIST_EVENT, transactionReceipt);
        ArrayList<ExitBlacklistEventResponse> responses = new ArrayList<ExitBlacklistEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExitBlacklistEventResponse typedResponse = new ExitBlacklistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExitBlacklistEventResponse> exitBlacklistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExitBlacklistEventResponse>() {
            @Override
            public ExitBlacklistEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXITBLACKLIST_EVENT, log);
                ExitBlacklistEventResponse typedResponse = new ExitBlacklistEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExitBlacklistEventResponse> exitBlacklistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXITBLACKLIST_EVENT));
        return exitBlacklistEventFlowable(filter);
    }

    public List<LocklistEventResponse> getLocklistEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOCKLIST_EVENT, transactionReceipt);
        ArrayList<LocklistEventResponse> responses = new ArrayList<LocklistEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LocklistEventResponse typedResponse = new LocklistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LocklistEventResponse> locklistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LocklistEventResponse>() {
            @Override
            public LocklistEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(LOCKLIST_EVENT, log);
                LocklistEventResponse typedResponse = new LocklistEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LocklistEventResponse> locklistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOCKLIST_EVENT));
        return locklistEventFlowable(filter);
    }

    public List<MetaTransferBatchEventResponse> getMetaTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(METATRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<MetaTransferBatchEventResponse> responses = new ArrayList<MetaTransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MetaTransferBatchEventResponse typedResponse = new MetaTransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amounts = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MetaTransferBatchEventResponse> metaTransferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MetaTransferBatchEventResponse>() {
            @Override
            public MetaTransferBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(METATRANSFERBATCH_EVENT, log);
                MetaTransferBatchEventResponse typedResponse = new MetaTransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amounts = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MetaTransferBatchEventResponse> metaTransferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METATRANSFERBATCH_EVENT));
        return metaTransferBatchEventFlowable(filter);
    }

    public List<MetaTransferSingleEventResponse> getMetaTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(METATRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<MetaTransferSingleEventResponse> responses = new ArrayList<MetaTransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MetaTransferSingleEventResponse typedResponse = new MetaTransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MetaTransferSingleEventResponse> metaTransferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MetaTransferSingleEventResponse>() {
            @Override
            public MetaTransferSingleEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(METATRANSFERSINGLE_EVENT, log);
                MetaTransferSingleEventResponse typedResponse = new MetaTransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MetaTransferSingleEventResponse> metaTransferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METATRANSFERSINGLE_EVENT));
        return metaTransferSingleEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<SetURIEventResponse> getSetURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETURI_EVENT, transactionReceipt);
        ArrayList<SetURIEventResponse> responses = new ArrayList<SetURIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetURIEventResponse typedResponse = new SetURIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ddcId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetURIEventResponse> setURIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetURIEventResponse>() {
            @Override
            public SetURIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETURI_EVENT, log);
                SetURIEventResponse typedResponse = new SetURIEventResponse();
                typedResponse.log = log;
                typedResponse.ddcId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetURIEventResponse> setURIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETURI_EVENT));
        return setURIEventFlowable(filter);
    }

    public List<SyncDDCOwnersEventResponse> getSyncDDCOwnersEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SYNCDDCOWNERS_EVENT, transactionReceipt);
        ArrayList<SyncDDCOwnersEventResponse> responses = new ArrayList<SyncDDCOwnersEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SyncDDCOwnersEventResponse typedResponse = new SyncDDCOwnersEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.owners = (List<List<String>>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SyncDDCOwnersEventResponse> syncDDCOwnersEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SyncDDCOwnersEventResponse>() {
            @Override
            public SyncDDCOwnersEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SYNCDDCOWNERS_EVENT, log);
                SyncDDCOwnersEventResponse typedResponse = new SyncDDCOwnersEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.owners = (List<List<String>>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SyncDDCOwnersEventResponse> syncDDCOwnersEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SYNCDDCOWNERS_EVENT));
        return syncDDCOwnersEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amounts = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amounts = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<UnLocklistEventResponse> getUnLocklistEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UNLOCKLIST_EVENT, transactionReceipt);
        ArrayList<UnLocklistEventResponse> responses = new ArrayList<UnLocklistEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnLocklistEventResponse typedResponse = new UnLocklistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnLocklistEventResponse> unLocklistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnLocklistEventResponse>() {
            @Override
            public UnLocklistEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UNLOCKLIST_EVENT, log);
                UnLocklistEventResponse typedResponse = new UnLocklistEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnLocklistEventResponse> unLocklistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNLOCKLIST_EVENT));
        return unLocklistEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner, BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(160, owner),
                new Uint256(ddcId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> owners, List<BigInteger> ddcIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(owners, Address.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burn(String owner, BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new Address(160, owner),
                new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(String owner, List<BigInteger> ddcIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH, 
                Arrays.<Type>asList(new Address(160, owner),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> ddcURI(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DDCURI, 
                Arrays.<Type>asList(new Uint256(ddcId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> freeze(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getLatestDDCId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLATESTDDCID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getNonce(String from) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNONCE, 
                Arrays.<Type>asList(new Address(160, from)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(160, owner),
                new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> lock(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LOCK, 
                Arrays.<Type>asList(new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> metaBurn(String owner, BigInteger ddcId, BigInteger nonce, BigInteger deadline, byte[] sign) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_METABURN, 
                Arrays.<Type>asList(new Address(160, owner),
                new Uint256(ddcId),
                new Uint256(nonce),
                new Uint256(deadline),
                new org.web3j.abi.datatypes.DynamicBytes(sign)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> metaBurnBatch(String owner, List<BigInteger> ddcIds, BigInteger nonce, BigInteger deadline, byte[] sign) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_METABURNBATCH, 
                Arrays.<Type>asList(new Address(160, owner),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class)),
                new Uint256(nonce),
                new Uint256(deadline),
                new org.web3j.abi.datatypes.DynamicBytes(sign)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> metaSafeBatchTransferFrom(String from, String to, List<BigInteger> ddcIds, List<BigInteger> amounts, byte[] data, BigInteger nonce, BigInteger deadline, byte[] sign) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_METASAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                new org.web3j.abi.datatypes.DynamicBytes(data), 
                new Uint256(nonce),
                new Uint256(deadline),
                new org.web3j.abi.datatypes.DynamicBytes(sign)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> metaSafeMint(String to, BigInteger amount, String _ddcURI, byte[] data, BigInteger nonce, BigInteger deadline, byte[] sign) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_METASAFEMINT, 
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(amount),
                new Utf8String(_ddcURI),
                new org.web3j.abi.datatypes.DynamicBytes(data), 
                new Uint256(nonce),
                new Uint256(deadline),
                new org.web3j.abi.datatypes.DynamicBytes(sign)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> metaSafeMintBatch(String to, List<BigInteger> amounts, List<String> ddcURIs, byte[] data, BigInteger nonce, BigInteger deadline, byte[] sign) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_METASAFEMINTBATCH, 
                Arrays.<Type>asList(new Address(160, to),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(ddcURIs, Utf8String.class)),
                new org.web3j.abi.datatypes.DynamicBytes(data), 
                new Uint256(nonce),
                new Uint256(deadline),
                new org.web3j.abi.datatypes.DynamicBytes(sign)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> metaSafeTransferFrom(String from, String to, BigInteger ddcId, BigInteger amount, byte[] data, BigInteger nonce, BigInteger deadline, byte[] sign) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_METASAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(ddcId),
                new Uint256(amount),
                new org.web3j.abi.datatypes.DynamicBytes(data), 
                new Uint256(nonce),
                new Uint256(deadline),
                new org.web3j.abi.datatypes.DynamicBytes(sign)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> ownerOf(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new Uint256(ddcId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ddcIds, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMint(String to, BigInteger amount, String _ddcURI, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINT, 
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(amount),
                new Utf8String(_ddcURI),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMintBatch(String to, List<BigInteger> amounts, List<String> ddcURIs, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINTBATCH, 
                Arrays.<Type>asList(new Address(160, to),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(ddcURIs, Utf8String.class)),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger ddcId, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(ddcId),
                new Uint256(amount),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(160, operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAuthorityProxyAddress(String authorityProxyAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAUTHORITYPROXYADDRESS, 
                Arrays.<Type>asList(new Address(160, authorityProxyAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setChargeProxyAddress(String chargeProxyAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCHARGEPROXYADDRESS, 
                Arrays.<Type>asList(new Address(160, chargeProxyAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMetaSeparatorArg(byte[] separator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMETASEPARATORARG, 
                Arrays.<Type>asList(new Bytes32(separator)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMetaTypeHashArgs(BigInteger hashType, byte[] hashValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMETATYPEHASHARGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(hashType), 
                new Bytes32(hashValue)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setURI(String owner, BigInteger ddcId, String ddcURI_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETURI, 
                Arrays.<Type>asList(new Address(160, owner),
                new Uint256(ddcId),
                new Utf8String(ddcURI_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> syncDDCOwners(List<BigInteger> ddcIds, List<List<String>> owners) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SYNCDDCOWNERS, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class)),
                new DynamicArray<DynamicArray>(
                        DynamicArray.class,
                        org.web3j.abi.Utils.typeMap(owners, DynamicArray.class,
                Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unFreeze(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unlock(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLOCK, 
                Arrays.<Type>asList(new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETO, 
                Arrays.<Type>asList(new Address(160, newImplementation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new Address(160, newImplementation),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DDC1155 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DDC1155(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DDC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DDC1155(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DDC1155 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DDC1155(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DDC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DDC1155(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DDC1155> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DDC1155.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<DDC1155> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DDC1155.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DDC1155> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DDC1155.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DDC1155> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DDC1155.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class EnterBlacklistEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger ddcId;
    }

    public static class ExitBlacklistEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger ddcId;
    }

    public static class LocklistEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger ddcId;
    }

    public static class MetaTransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ddcIds;

        public List<BigInteger> amounts;
    }

    public static class MetaTransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger ddcId;

        public BigInteger amount;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SetURIEventResponse extends BaseEventResponse {
        public BigInteger ddcId;

        public String ddcURI;
    }

    public static class SyncDDCOwnersEventResponse extends BaseEventResponse {
        public String operator;

        public List<BigInteger> ddcIds;

        public List<List<String>> owners;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ddcIds;

        public List<BigInteger> amounts;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger ddcId;

        public BigInteger amount;
    }

    public static class UnLocklistEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger ddcId;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }
}
