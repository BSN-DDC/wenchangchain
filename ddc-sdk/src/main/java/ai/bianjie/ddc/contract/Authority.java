package ai.bianjie.ddc.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Authority extends Contract {
    public static final String BINARY = "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b5060805161408f62000100600039600081816108f80152818161093801528181610d7b0152610dbb015261408f6000f3fe6080604052600436106101815760003560e01c8063a8dd7ce8116100d1578063d3d65ddb1161008a578063ed5cad6411610064578063ed5cad6414610447578063f2fde38b14610467578063faf3c53f14610487578063fbcbc0f1146104a757600080fd5b8063d3d65ddb146103ef578063e157689714610407578063e3f00c3a1461042757600080fd5b8063a8dd7ce814610322578063b50f1a5e14610342578063b9b89dca1461036f578063bac7ad521461038f578063bea24f20146103af578063cf149c6d146103cf57600080fd5b80634f1ef2861161013e5780638129fc1c116101185780638129fc1c146102a55780638da5cb5b146102ba57806395c2a8d9146102e2578063a6ff8f0c1461030257600080fd5b80634f1ef2861461025d57806359dac58514610270578063715018a61461029057600080fd5b806301843caa1461018657806305e847fb146101bb5780633659cfe6146101dd5780633a723d17146101fd578063402089501461021d578063470cf0e01461023d575b600080fd5b34801561019257600080fd5b506101a66101a1366004613437565b6104da565b60405190151581526020015b60405180910390f35b3480156101c757600080fd5b506101db6101d636600461347a565b6106e8565b005b3480156101e957600080fd5b506101db6101f83660046134bd565b6108ee565b34801561020957600080fd5b506101a6610218366004613437565b6109b6565b34801561022957600080fd5b506101db6102383660046136ad565b610b53565b34801561024957600080fd5b506101a6610258366004613772565b610ca6565b6101db61026b3660046137ac565b610d71565b34801561027c57600080fd5b506101db61028b36600461380e565b610e2a565b34801561029c57600080fd5b506101db610eec565b3480156102b157600080fd5b506101db610f22565b3480156102c657600080fd5b506033546040516001600160a01b0390911681526020016101b2565b3480156102ee57600080fd5b506101a66102fd3660046134bd565b610f9d565b34801561030e57600080fd5b506101db61031d366004613838565b610fca565b34801561032e57600080fd5b506101db61033d36600461380e565b61117d565b34801561034e57600080fd5b5061036261035d366004613856565b61122a565b6040516101b29190613872565b34801561037b57600080fd5b506101db61038a3660046138c0565b611319565b34801561039b57600080fd5b506101db6103aa3660046138f5565b611428565b3480156103bb57600080fd5b506101db6103ca366004613927565b61182d565b3480156103db57600080fd5b506101db6103ea36600461399b565b6118ac565b3480156103fb57600080fd5b5060ce5460ff166101a6565b34801561041357600080fd5b506101db610422366004613927565b6119e8565b34801561043357600080fd5b506101db610442366004613a19565b611abe565b34801561045357600080fd5b506101a6610462366004613aa6565b611ad4565b34801561047357600080fd5b506101db6104823660046134bd565b611b2f565b34801561049357600080fd5b506101db6104a2366004613838565b611bc7565b3480156104b357600080fd5b506104c76104c23660046134bd565b611f90565b6040516101b29796959493929190613b4a565b6000806104e6846122f4565b90506104f58160200151612615565b6104fe81612636565b6000610509846122f4565b90506105188160200151612615565b61052181612636565b60018260400151600281111561053957610539613b20565b14801561055b575060018160400151600281111561055957610559613b20565b145b156105c55760608082015190830151610573916126a0565b80156105bc5750815160405160cc9161058b91613bd5565b908152604051908190036020018120825190916105a89190613bd5565b9081526040519081900360200190205460ff165b925050506106e2565b6001826040015160028111156105dd576105dd613b20565b1480156105ff57506002816040015160028111156105fd576105fd613b20565b145b1561063557815160405160cc9161061591613bd5565b908152602001604051809103902081606001516040516105a89190613bd5565b60028260400151600281111561064d5761064d613b20565b14801561066f575060018160400151600281111561066d5761066d613b20565b145b156106885760cc826060015160405161058b9190613bd5565b6002826040015160028111156106a0576106a0613b20565b1480156106c257506002816040015160028111156106c0576106c0613b20565b145b156106db5760cc82606001516040516106159190613bd5565b6000925050505b92915050565b6106f26000612741565b6106fb836127a5565b610704826127a5565b600061070f846122f4565b905061071e8160200151612615565b61072781612636565b6000610732846122f4565b90506107418160200151612615565b61074a81612636565b60018260400151600281111561076257610762613b20565b148015610784575060018160400151600281111561078257610782613b20565b145b6107e55760405162461bcd60e51b815260206004820152602760248201527f417574686f726974793a426f7468206d7573742062652060706c6174666f726d6044820152666020726f6c657360c81b60648201526084015b60405180910390fd5b805182516107f2916126a0565b156108545760405162461bcd60e51b815260206004820152602c60248201527f417574686f726974793a426f746820617265207468652073616d6520706c617460448201526b199bdc9b481858d8dbdd5b9d60a21b60648201526084016107dc565b8260cc83600001516040516108699190613bd5565b908152604051908190036020018120835190916108869190613bd5565b90815260405160209181900382018120805460ff19169315159390931790925584151582526001600160a01b0386811692908816917f944da3aaddcf895695572377f73f4b10c3822d1ea336c5d59f364f3e5e1b121891015b60405180910390a35050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109365760405162461bcd60e51b81526004016107dc90613bf1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109686127f4565b6001600160a01b03161461098e5760405162461bcd60e51b81526004016107dc90613c3d565b61099781612822565b604080516000808252602082019092526109b39183919061284c565b50565b6000806109c2846122f4565b90506109d18160200151612615565b6109da81612636565b60006109e5846122f4565b90506109f48160200151612615565b6109fd81612636565b600182604001516002811115610a1557610a15613b20565b148015610a375750600181604001516002811115610a3557610a35613b20565b145b15610a635760608082015190830151610a4f916126a0565b80156105bc5750805182516105bc916126a0565b600182604001516002811115610a7b57610a7b613b20565b148015610a9d5750600281604001516002811115610a9b57610a9b613b20565b145b15610ab257606081015182516105bc916126a0565b600282604001516002811115610aca57610aca613b20565b148015610aec5750600181604001516002811115610aea57610aea613b20565b145b15610b0157606082015181516105bc916126a0565b600282604001516002811115610b1957610b19613b20565b148015610b3b5750600281604001516002811115610b3957610b39613b20565b145b156106db57606080820151908301516105bc916126a0565b610b5b612997565b610b656000612741565b82518451148015610b77575081518351145b8015610b84575080518251145b610bd05760405162461bcd60e51b815260206004820152601a60248201527f417574686f726974793a206c656e677468206d69736d6174636800000000000060448201526064016107dc565b60005b8451811015610c5e57610c4c858281518110610bf157610bf1613c89565b6020026020010151858381518110610c0b57610c0b613c89565b6020026020010151858481518110610c2557610c25613c89565b6020026020010151858581518110610c3f57610c3f613c89565b60200260200101516129fd565b80610c5681613cb5565b915050610bd3565b50336001600160a01b03167f697b1ca999dc9fa10f6b5121c3681b6e562901370eebdabe6a41f253731ee2b985604051610c989190613cce565b60405180910390a250505050565b600080610cb2856122f4565b9050610cc18160200151612615565b610cca81612636565b610cd3846127a5565b610cdc83612b46565b6000610cec826040015186612b95565b9050600060ca600084604001516002811115610d0a57610d0a613b20565b6002811115610d1b57610d1b613b20565b81526020019081526020016000208281548110610d3a57610d3a613c89565b600091825260208083206001600160e01b0319891684526002600390930201919091019052604090205411925050505b9392505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610db95760405162461bcd60e51b81526004016107dc90613bf1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610deb6127f4565b6001600160a01b031614610e115760405162461bcd60e51b81526004016107dc90613c3d565b610e1a82612822565b610e268282600161284c565b5050565b610e346000612741565b60ce54610100900460ff16151581151503610e915760405162461bcd60e51b815260206004820152601b60248201527f417574686f726974793a696e76616c6964206f7065726174696f6e000000000060448201526064016107dc565b60ce805461ff00191661010083151502179055336001600160a01b03167f7d50bb020f29cc2d35f133362054f432834ddc2cfc3f6dc0f9e9dea5bf8ffe6b82604051610ee1911515815260200190565b60405180910390a250565b6033546001600160a01b03163314610f165760405162461bcd60e51b81526004016107dc90613d0f565b610f206000612c72565b565b600054610100900460ff1680610f3b575060005460ff16155b610f575760405162461bcd60e51b81526004016107dc90613d44565b600054610100900460ff16158015610f79576000805461ffff19166101011790555b610f81612cc4565b610f89612d2b565b80156109b3576000805461ff001916905550565b600080610fa9836122f4565b9050610fb88160200151612615565b610fc181612636565b50600192915050565b610fd46000612741565b610fdd826127a5565b610fe681612b46565b600060ca6000856002811115610ffe57610ffe613b20565b600281111561100f5761100f613b20565b81526020019081526020016000206110278585612b95565b8154811061103757611037613c89565b600091825260208083206001600160e01b03198616845260026003909302019182019052604090912054909150806110b15760405162461bcd60e51b815260206004820152601e60248201527f417574686f726974793a66756e6320646f6573206e6f7420657869737473000060448201526064016107dc565b60006001808401906110c39084613d92565b815481106110d3576110d3613c89565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550816002016000846001600160e01b0319166001600160e01b03191681526020019081526020016000206000905584600281111561114257611142613b20565b336001600160a01b03167ffd7321e06212c7e20cb40ffe695d160cb669329e947bbcab975e41e98515341786866040516108df929190613da5565b6111876000612741565b60ce5460ff161515811515036111df5760405162461bcd60e51b815260206004820152601b60248201527f417574686f726974793a696e76616c6964206f7065726174696f6e000000000060448201526064016107dc565b60ce805460ff1916821515179055336001600160a01b03167f548b8e30af324db539fea4a4816919b2d27ab094df8638f0e3c16c7271d7986082604051610ee1911515815260200190565b6060611235826127a5565b60ca600084600281111561124b5761124b613b20565b600281111561125c5761125c613b20565b81526020019081526020016000206112748484612b95565b8154811061128457611284613c89565b906000526020600020906003020160010180548060200260200160405190810160405280929190818152602001828054801561130c57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116112ce5790505b5050505050905092915050565b6113236000612741565b60005b81518110156113ee5781818151811061134157611341613c89565b6020026020010151516000036113915760405162461bcd60e51b8152602060048201526015602482015274105d5d1a1bdc9a5d1e4e9a5b9d985b1a5908191a59605a1b60448201526064016107dc565b600160cd8383815181106113a7576113a7613c89565b60200260200101516040516113bc9190613bd5565b908152604051908190036020019020805491151560ff19909216919091179055806113e681613cb5565b915050611326565b50336001600160a01b03167f199521935c6599c790890fbd51923a1d92fb29f6691b18e985938fab4070e8ec82604051610ee19190613dc8565b60008061143485612d92565b9150915061144181612636565b61144b8282612e55565b8061146b575060008160400151600281111561146957611469613b20565b145b6114c85760405162461bcd60e51b815260206004820152602860248201527f417574686f726974793a204163636f756e74277320726f6c6520646f6573206e6044820152670dee840dac2e8c6d60c31b60648201526084016107dc565b6002816040015160028111156114e0576114e0613b20565b036115255760405162461bcd60e51b8152602060048201526015602482015274417574686f726974793a2077726f6e6720726f6c6560581b60448201526064016107dc565b60008160400151600281111561153d5761153d613b20565b036116615782156115be5783600181111561155a5761155a613b20565b8260800151600181111561157057611570613b20565b0361158d5760405162461bcd60e51b81526004016107dc90613e2a565b608082018460018111156115a3576115a3613b20565b908160018111156115b6576115b6613b20565b9052506116f0565b8360018111156115d0576115d0613b20565b8260a0015160018111156115e6576115e6613b20565b0361164b5760405162461bcd60e51b815260206004820152602f60248201527f417574686f726974793a204f70657261746f72537461746520646f65736e277460448201526e206e65656420746f206368616e676560881b60648201526084016107dc565b60a082018460018111156115a3576115a3613b20565b60018160400151600281111561167957611679613b20565b036116f05783600181111561169057611690613b20565b826080015160018111156116a6576116a6613b20565b036116c35760405162461bcd60e51b81526004016107dc90613e2a565b608082018460018111156116d9576116d9613b20565b908160018111156116ec576116ec613b20565b9052505b6001600160a01b038516600090815260c960205260409020825183919081906117199082613f02565b506020820151600182019061172e9082613f02565b5060408201518160020160006101000a81548160ff0219169083600281111561175957611759613b20565b0217905550606082015160038201906117729082613f02565b50608082015160048201805460ff19166001838181111561179557611795613b20565b021790555060a082015160048201805461ff0019166101008360018111156117bf576117bf613b20565b021790555060c082015160058201906117d89082613f02565b505050608082015160a08301516040516001600160a01b038816927f3a99d1f905eb66fd0850dd6e2156668b6ae1f16f41cd49dd7c6d4fb5147f784f9261181e92613fc2565b60405180910390a25050505050565b6118376001612741565b61183f612e69565b61184882612ecc565b61185183612f2d565b600061185c336122f4565b905061187084838360000151866002612f93565b6040516001600160a01b0385169033907fd246aa772c5574778b374ed1202c22bac9c87a04fd3624439c2642fa6ca6217190600090a350505050565b6118b66001612741565b815183511480156118c8575080518251145b6119145760405162461bcd60e51b815260206004820152601a60248201527f417574686f726974793a206c656e677468206d69736d6174636800000000000060448201526064016107dc565b600061191f336122f4565b905060005b8451811015610c5e57611935612e69565b61195784828151811061194a5761194a613c89565b6020026020010151612ecc565b61197985828151811061196c5761196c613c89565b6020026020010151612f2d565b6119d685828151811061198e5761198e613c89565b60200260200101518483815181106119a8576119a8613c89565b602002602001015184600001518785815181106119c7576119c7613c89565b60200260200101516002612f93565b806119e081613cb5565b915050611924565b6033546001600160a01b03163314611a125760405162461bcd60e51b81526004016107dc90613d0f565b8051600003611a635760405162461bcd60e51b815260206004820152601f60248201527f417574686f726974793a204449442063616e6e6f7420626520656d707479210060448201526064016107dc565b611a6c82612ecc565b611a7583612f2d565b611a83838283856000612f93565b6040516001600160a01b0384169033907fd246aa772c5574778b374ed1202c22bac9c87a04fd3624439c2642fa6ca6217190600090a3505050565b611ac86000612741565b611870848484846129fd565b600080611ae0846122f4565b9050611aef8160200151612615565b611af881612636565b826002811115611b0a57611b0a613b20565b60ff1681604001516002811115611b2357611b23613b20565b60ff1614949350505050565b6033546001600160a01b03163314611b595760405162461bcd60e51b81526004016107dc90613d0f565b6001600160a01b038116611bbe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107dc565b6109b381612c72565b611bd16000612741565b611bda826127a5565b611be381612b46565b60008060cb6000866002811115611bfc57611bfc613b20565b6002811115611c0d57611c0d613b20565b81526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002054905080600003611e1857600060ca6000876002811115611c6157611c61613b20565b6002811115611c7257611c72613b20565b815260200190815260200160002080549050905060ca6000876002811115611c9c57611c9c613b20565b6002811115611cad57611cad613b20565b81526020810191909152604001600090812080546001018155815260ca90876002811115611cdd57611cdd613b20565b6002811115611cee57611cee613b20565b81526020019081526020016000208181548110611d0d57611d0d613c89565b9060005260206000209060030201925060ca6000876002811115611d3357611d33613b20565b6002811115611d4457611d44613b20565b81526020019081526020016000208054905060cb6000886002811115611d6c57611d6c613b20565b6002811115611d7d57611d7d613b20565b8152602080820192909252604090810160009081206001600160a01b038a168083529084528282209490945586546001600160a01b03191690931786556001808701805491820181558085528385206008830401805463ffffffff60079094166004026101000a938402191660e08b901c9390930292909217909155546001600160e01b031988168452600287019092529091205550611f43565b60ca6000866002811115611e2e57611e2e613b20565b6002811115611e3f57611e3f613b20565b8152602001908152602001600020600182611e5a9190613d92565b81548110611e6a57611e6a613c89565b600091825260208083206001600160e01b0319871684526002600390930201918201905260409091205490925015611ee45760405162461bcd60e51b815260206004820152601e60248201527f417574686f726974793a2066756e6320616c726561647920657869737473000060448201526064016107dc565b600182810180549182018155600081815260208082206008850401805463ffffffff60079096166004026101000a958602191660e089901c959095029490941790935590546001600160e01b0319861682526002850190925260409020555b846002811115611f5557611f55613b20565b336001600160a01b03167fd2925d5c000f95a189be5c6c90c0dc14f33c077900241eb3e7c0a287d914e65086866040516108df929190613da5565b606080600060606000806060600060c960008a6001600160a01b03166001600160a01b031681526020019081526020016000206040518060e0016040529081600082018054611fde90613e79565b80601f016020809104026020016040519081016040528092919081815260200182805461200a90613e79565b80156120575780601f1061202c57610100808354040283529160200191612057565b820191906000526020600020905b81548152906001019060200180831161203a57829003601f168201915b5050505050815260200160018201805461207090613e79565b80601f016020809104026020016040519081016040528092919081815260200182805461209c90613e79565b80156120e95780601f106120be576101008083540402835291602001916120e9565b820191906000526020600020905b8154815290600101906020018083116120cc57829003601f168201915b505050918352505060028281015460209092019160ff169081111561211057612110613b20565b600281111561212157612121613b20565b815260200160038201805461213590613e79565b80601f016020809104026020016040519081016040528092919081815260200182805461216190613e79565b80156121ae5780601f10612183576101008083540402835291602001916121ae565b820191906000526020600020905b81548152906001019060200180831161219157829003601f168201915b5050509183525050600482015460209091019060ff1660018111156121d5576121d5613b20565b60018111156121e6576121e6613b20565b81526020016004820160019054906101000a900460ff16600181111561220e5761220e613b20565b600181111561221f5761221f613b20565b815260200160058201805461223390613e79565b80601f016020809104026020016040519081016040528092919081815260200182805461225f90613e79565b80156122ac5780601f10612281576101008083540402835291602001916122ac565b820191906000526020600020905b81548152906001019060200180831161228f57829003601f168201915b5050505050815250509050806000015181602001518260400151836060015184608001518560a001518660c00151975097509750975097509750975050919395979092949650565b6122fc6133e0565b612305826127a5565b6001600160a01b038216600090815260c9602052604090819020815160e0810190925280548290829061233790613e79565b80601f016020809104026020016040519081016040528092919081815260200182805461236390613e79565b80156123b05780601f10612385576101008083540402835291602001916123b0565b820191906000526020600020905b81548152906001019060200180831161239357829003601f168201915b505050505081526020016001820180546123c990613e79565b80601f01602080910402602001604051908101604052809291908181526020018280546123f590613e79565b80156124425780601f1061241757610100808354040283529160200191612442565b820191906000526020600020905b81548152906001019060200180831161242557829003601f168201915b505050918352505060028281015460209092019160ff169081111561246957612469613b20565b600281111561247a5761247a613b20565b815260200160038201805461248e90613e79565b80601f01602080910402602001604051908101604052809291908181526020018280546124ba90613e79565b80156125075780601f106124dc57610100808354040283529160200191612507565b820191906000526020600020905b8154815290600101906020018083116124ea57829003601f168201915b5050509183525050600482015460209091019060ff16600181111561252e5761252e613b20565b600181111561253f5761253f613b20565b81526020016004820160019054906101000a900460ff16600181111561256757612567613b20565b600181111561257857612578613b20565b815260200160058201805461258c90613e79565b80601f01602080910402602001604051908101604052809291908181526020018280546125b890613e79565b80156126055780601f106125da57610100808354040283529160200191612605565b820191906000526020600020905b8154815290600101906020018083116125e857829003601f168201915b5050505050815250509050919050565b80516000036109b35760405162461bcd60e51b81526004016107dc90613fdd565b6126488160a0015182608001516130d3565b6109b35760405162461bcd60e51b815260206004820152602360248201527f417574686f726974793a204163636f756e7420686173206265656e2066726f7a604482015262656e2160e81b60648201526084016107dc565b8051825160009184918491146126bb576000925050506106e2565b815160005b81811015612734578281815181106126da576126da613c89565b602001015160f81c60f81b6001600160f81b03191684828151811061270157612701613c89565b01602001516001600160f81b031916146127225760009450505050506106e2565b8061272c81613cb5565b9150506126c0565b5060019695505050505050565b61274b3382611ad4565b6109b35760405162461bcd60e51b815260206004820152602560248201527f417574686f726974793a20696e636f727265637420726f6c65206f722064697360448201526418589b195960da1b60648201526084016107dc565b6001600160a01b0381166109b35760405162461bcd60e51b8152602060048201526016602482015275417574686f726974793a7a65726f206164647265737360501b60448201526064016107dc565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b031633146109b35760405162461bcd60e51b81526004016107dc90613d0f565b60006128566127f4565b90506128618461310d565b60008351118061286e5750815b1561287f5761287d84846131b2565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661299057805460ff191660011781556040516001600160a01b03831660248201526128fe90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526131b2565b50805460ff1916815561290f6127f4565b6001600160a01b0316826001600160a01b0316146129875760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016107dc565b6129908561329d565b5050505050565b60ce54610100900460ff16610f205760405162461bcd60e51b815260206004820152602660248201527f417574686f726974793a7377697463686572206f6620626174636820697320636044820152653637b9b2b21760d11b60648201526084016107dc565b612a0683612ecc565b612a0f84612f2d565b8051600290600003612aca578251600003612a7a5760405162461bcd60e51b815260206004820152602560248201527f417574686f726974793a206163636f756e744449442063616e6e6f7420626520604482015264656d70747960d81b60648201526084016107dc565b6000612a85336122f4565b90508060000151925060019150600160cd85604051612aa49190613bd5565b908152604051908190036020019020805491151560ff1990921691909117905550612b39565b60cd82604051612ada9190613bd5565b9081526040519081900360200190205460ff16612b395760405162461bcd60e51b815260206004820152601b60248201527f417574686f726974793a696e76616c6964206c6561646572444944000000000060448201526064016107dc565b6129908584848785612f93565b6001600160e01b031981166109b35760405162461bcd60e51b8152602060048201526015602482015274417574686f726974793a696e76616c69642073696760581b60448201526064016107dc565b60008060cb6000856002811115612bae57612bae613b20565b6002811115612bbf57612bbf613b20565b81526020019081526020016000206000846001600160a01b03166001600160a01b0316815260200190815260200160002054905060008111612c5f5760405162461bcd60e51b815260206004820152603360248201527f417574686f726974793a60726f6c6560206f722060636f6e74726163744164646044820152721c995cdcd808191bd95cdb89dd08195e1a5cdd606a1b60648201526084016107dc565b612c6a600182613d92565b949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680612cdd575060005460ff16155b612cf95760405162461bcd60e51b81526004016107dc90613d44565b600054610100900460ff16158015612d1b576000805461ffff19166101011790555b612d236132dd565b610f89613347565b600054610100900460ff1680612d44575060005460ff16155b612d605760405162461bcd60e51b81526004016107dc90613d44565b600054610100900460ff16158015612d82576000805461ffff19166101011790555b612d8a6132dd565b610f896132dd565b612d9a6133e0565b612da26133e0565b6000612dad846122f4565b9050806020015151600003612dd45760405162461bcd60e51b81526004016107dc90613fdd565b6000612ddf336122f4565b9050806020015151600003612e4b5760405162461bcd60e51b815260206004820152602c60248201527f417574686f726974793a204c65616465724163636f756e74496e666f20646f6560448201526b73206e6f742065786973742160a01b60648201526084016107dc565b9094909350915050565b80516060830151600091610d6a91906126a0565b60ce5460ff16610f205760405162461bcd60e51b815260206004820152602860248201527f417574686f726974793a7377697463686572206f6620706c6174666f726d20696044820152671cc818db1bdcd95960c21b60648201526084016107dc565b80516000036109b35760405162461bcd60e51b815260206004820152602760248201527f417574686f726974793a204163636f756e744e616d652063616e6e6f7420626560448201526620656d7074792160c81b60648201526084016107dc565b612f36816122f4565b6020015151156109b35760405162461bcd60e51b815260206004820152602260248201527f417574686f726974793a204163636f756e7420616c7265616479206578697374604482015261732160f01b60648201526084016107dc565b6040518060e00160405280858152602001838152602001826002811115612fbc57612fbc613b20565b815260208101859052604001600181526020016001815260408051602081810183526000808352938101919091526001600160a01b038916835260c9905290208151819061300a9082613f02565b506020820151600182019061301f9082613f02565b5060408201518160020160006101000a81548160ff0219169083600281111561304a5761304a613b20565b0217905550606082015160038201906130639082613f02565b50608082015160048201805460ff19166001838181111561308657613086613b20565b021790555060a082015160048201805461ff0019166101008360018111156130b0576130b0613b20565b021790555060c082015160058201906130c99082613f02565b5050505050505050565b600060018360018111156130e9576130e9613b20565b148015610d6a5750600182600181111561310557613105613b20565b149392505050565b803b6131715760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107dc565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6132115760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107dc565b600080846001600160a01b03168460405161322c9190613bd5565b600060405180830381855af49150503d8060008114613267576040519150601f19603f3d011682016040523d82523d6000602084013e61326c565b606091505b50915091506132948282604051806060016040528060278152602001614033602791396133a7565b95945050505050565b6132a68161310d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff16806132f6575060005460ff16155b6133125760405162461bcd60e51b81526004016107dc90613d44565b600054610100900460ff16158015610f89576000805461ffff191661010117905580156109b3576000805461ff001916905550565b600054610100900460ff1680613360575060005460ff16155b61337c5760405162461bcd60e51b81526004016107dc90613d44565b600054610100900460ff1615801561339e576000805461ffff19166101011790555b610f8933612c72565b606083156133b6575081610d6a565b8251156133c65782518084602001fd5b8160405162461bcd60e51b81526004016107dc919061401f565b6040805160e0810182526060808252602082015290810160008152606060208201526040016000815260200160008152602001606081525090565b80356001600160a01b038116811461343257600080fd5b919050565b6000806040838503121561344a57600080fd5b6134538361341b565b91506134616020840161341b565b90509250929050565b8035801515811461343257600080fd5b60008060006060848603121561348f57600080fd5b6134988461341b565b92506134a66020850161341b565b91506134b46040850161346a565b90509250925092565b6000602082840312156134cf57600080fd5b610d6a8261341b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613517576135176134d8565b604052919050565b600067ffffffffffffffff821115613539576135396134d8565b5060051b60200190565b600082601f83011261355457600080fd5b813560206135696135648361351f565b6134ee565b82815260059290921b8401810191818101908684111561358857600080fd5b8286015b848110156135aa5761359d8161341b565b835291830191830161358c565b509695505050505050565b600067ffffffffffffffff8311156135cf576135cf6134d8565b6135e2601f8401601f19166020016134ee565b90508281528383830111156135f657600080fd5b828260208301376000602084830101529392505050565b600082601f83011261361e57600080fd5b610d6a838335602085016135b5565b600082601f83011261363e57600080fd5b8135602061364e6135648361351f565b82815260059290921b8401810191818101908684111561366d57600080fd5b8286015b848110156135aa57803567ffffffffffffffff8111156136915760008081fd5b61369f8986838b010161360d565b845250918301918301613671565b600080600080608085870312156136c357600080fd5b843567ffffffffffffffff808211156136db57600080fd5b6136e788838901613543565b955060208701359150808211156136fd57600080fd5b6137098883890161362d565b9450604087013591508082111561371f57600080fd5b61372b8883890161362d565b9350606087013591508082111561374157600080fd5b5061374e8782880161362d565b91505092959194509250565b80356001600160e01b03198116811461343257600080fd5b60008060006060848603121561378757600080fd5b6137908461341b565b925061379e6020850161341b565b91506134b46040850161375a565b600080604083850312156137bf57600080fd5b6137c88361341b565b9150602083013567ffffffffffffffff8111156137e457600080fd5b8301601f810185136137f557600080fd5b613804858235602084016135b5565b9150509250929050565b60006020828403121561382057600080fd5b610d6a8261346a565b80356003811061343257600080fd5b60008060006060848603121561384d57600080fd5b61379084613829565b6000806040838503121561386957600080fd5b61345383613829565b6020808252825182820181905260009190848201906040850190845b818110156138b45783516001600160e01b0319168352928401929184019160010161388e565b50909695505050505050565b6000602082840312156138d257600080fd5b813567ffffffffffffffff8111156138e957600080fd5b612c6a8482850161362d565b60008060006060848603121561390a57600080fd5b6139138461341b565b92506020840135600281106134a657600080fd5b60008060006060848603121561393c57600080fd5b6139458461341b565b9250602084013567ffffffffffffffff8082111561396257600080fd5b61396e8783880161360d565b9350604086013591508082111561398457600080fd5b506139918682870161360d565b9150509250925092565b6000806000606084860312156139b057600080fd5b833567ffffffffffffffff808211156139c857600080fd5b6139d487838801613543565b945060208601359150808211156139ea57600080fd5b6139f68783880161362d565b93506040860135915080821115613a0c57600080fd5b506139918682870161362d565b60008060008060808587031215613a2f57600080fd5b613a388561341b565b9350602085013567ffffffffffffffff80821115613a5557600080fd5b613a618883890161360d565b94506040870135915080821115613a7757600080fd5b613a838883890161360d565b93506060870135915080821115613a9957600080fd5b5061374e8782880161360d565b60008060408385031215613ab957600080fd5b613ac28361341b565b915061346160208401613829565b60005b83811015613aeb578181015183820152602001613ad3565b50506000910152565b60008151808452613b0c816020860160208601613ad0565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60028110613b4657613b46613b20565b9052565b60e081526000613b5d60e083018a613af4565b8281036020840152613b6f818a613af4565b905060038810613b8157613b81613b20565b8760408401528281036060840152613b998188613af4565b9050613ba86080840187613b36565b613bb560a0840186613b36565b82810360c0840152613bc78185613af4565b9a9950505050505050505050565b60008251613be7818460208701613ad0565b9190910192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613cc757613cc7613c9f565b5060010190565b6020808252825182820181905260009190848201906040850190845b818110156138b45783516001600160a01b031683529284019291840191600101613cea565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b818103818111156106e2576106e2613c9f565b6001600160a01b039290921682526001600160e01b031916602082015260400190565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613e1d57603f19888603018452613e0b858351613af4565b94509285019290850190600101613def565b5092979650505050505050565b6020808252602f908201527f417574686f726974793a20506c6174666f726d537461746520646f65736e277460408201526e206e65656420746f206368616e676560881b606082015260800190565b600181811c90821680613e8d57607f821691505b602082108103613ead57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115613efd57600081815260208120601f850160051c81016020861015613eda5750805b601f850160051c820191505b81811015613ef957828155600101613ee6565b5050505b505050565b815167ffffffffffffffff811115613f1c57613f1c6134d8565b613f3081613f2a8454613e79565b84613eb3565b602080601f831160018114613f655760008415613f4d5750858301515b600019600386901b1c1916600185901b178555613ef9565b600085815260208120601f198616915b82811015613f9457888601518255948401946001909101908401613f75565b5085821015613fb25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60408101613fd08285613b36565b610d6a6020830184613b36565b60208082526022908201527f417574686f726974793a204163636f756e7420646f6573206e6f742065786973604082015261742160f01b606082015260800190565b602081526000610d6a6020830184613af456fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203cc647ba4fb4c33ed772187d21bcb22a1bd47d5809c5c265581217984b63d8cd64736f6c63430008110033";

    public static final String FUNC_ACCOUNTAVAILABLE = "accountAvailable";

    public static final String FUNC_ADDACCOUNTBYOPERATOR = "addAccountByOperator";

    public static final String FUNC_ADDACCOUNTBYPLATFORM = "addAccountByPlatform";

    public static final String FUNC_ADDBATCHACCOUNTBYOPERATOR = "addBatchAccountByOperator";

    public static final String FUNC_ADDBATCHACCOUNTBYPLATFORM = "addBatchAccountByPlatform";

    public static final String FUNC_ADDFUNCTION = "addFunction";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_CHECKAVAILABLEANDROLE = "checkAvailableAndRole";

    public static final String FUNC_CROSSPLATFORMAPPROVAL = "crossPlatformApproval";

    public static final String FUNC_CROSSPLATFORMCHECK = "crossPlatformCheck";

    public static final String FUNC_DELFUNCTION = "delFunction";

    public static final String FUNC_GETACCOUNT = "getAccount";

    public static final String FUNC_GETFUNCTIONS = "getFunctions";

    public static final String FUNC_HASFUNCTIONPERMISSION = "hasFunctionPermission";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ONEPLATFORMCHECK = "onePlatformCheck";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETSWITCHERSTATEOFBATCH = "setSwitcherStateOfBatch";

    public static final String FUNC_SETSWITCHERSTATEOFPLATFORM = "setSwitcherStateOfPlatform";

    public static final String FUNC_SWITCHERSTATEOFPLATFORM = "switcherStateOfPlatform";

    public static final String FUNC_SYNCPLATFORMDID = "syncPlatformDID";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEACCOUNTSTATE = "updateAccountState";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event ADDACCOUNT_EVENT = new Event("AddAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ADDBATCHACCOUNT_EVENT = new Event("AddBatchAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Address>>() {}));
    ;

    public static final Event ADDFUNCTION_EVENT = new Event("AddFunction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Address>() {}, new TypeReference<Bytes4>() {}));
    ;

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event CROSSPLATFORMAPPROVAL_EVENT = new Event("CrossPlatformApproval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event DELFUNCTION_EVENT = new Event("DelFunction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Address>() {}, new TypeReference<Bytes4>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETSWITCHERSTATEOFBATCH_EVENT = new Event("SetSwitcherStateOfBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SETSWITCHERSTATEOFPLATFORM_EVENT = new Event("SetSwitcherStateOfPlatform", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SYNCPLATFORMDID_EVENT = new Event("SyncPlatformDID", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Utf8String>>() {}));
    ;

    public static final Event UPDATEACCOUNTSTATE_EVENT = new Event("UpdateAccountState", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Authority(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Authority(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Authority(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Authority(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AddAccountEventResponse> getAddAccountEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDACCOUNT_EVENT, transactionReceipt);
        ArrayList<AddAccountEventResponse> responses = new ArrayList<AddAccountEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddAccountEventResponse typedResponse = new AddAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddAccountEventResponse> addAccountEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddAccountEventResponse>() {
            @Override
            public AddAccountEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADDACCOUNT_EVENT, log);
                AddAccountEventResponse typedResponse = new AddAccountEventResponse();
                typedResponse.log = log;
                typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddAccountEventResponse> addAccountEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDACCOUNT_EVENT));
        return addAccountEventFlowable(filter);
    }

    public List<AddBatchAccountEventResponse> getAddBatchAccountEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDBATCHACCOUNT_EVENT, transactionReceipt);
        ArrayList<AddBatchAccountEventResponse> responses = new ArrayList<AddBatchAccountEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddBatchAccountEventResponse typedResponse = new AddBatchAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.accounts = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddBatchAccountEventResponse> addBatchAccountEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddBatchAccountEventResponse>() {
            @Override
            public AddBatchAccountEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADDBATCHACCOUNT_EVENT, log);
                AddBatchAccountEventResponse typedResponse = new AddBatchAccountEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.accounts = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddBatchAccountEventResponse> addBatchAccountEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDBATCHACCOUNT_EVENT));
        return addBatchAccountEventFlowable(filter);
    }

    public List<AddFunctionEventResponse> getAddFunctionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDFUNCTION_EVENT, transactionReceipt);
        ArrayList<AddFunctionEventResponse> responses = new ArrayList<AddFunctionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddFunctionEventResponse typedResponse = new AddFunctionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddFunctionEventResponse> addFunctionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddFunctionEventResponse>() {
            @Override
            public AddFunctionEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADDFUNCTION_EVENT, log);
                AddFunctionEventResponse typedResponse = new AddFunctionEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddFunctionEventResponse> addFunctionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDFUNCTION_EVENT));
        return addFunctionEventFlowable(filter);
    }

    public List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AdminChangedEventResponse>() {
            @Override
            public AdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINCHANGED_EVENT, log);
                AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BeaconUpgradedEventResponse>() {
            @Override
            public BeaconUpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
                BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public List<CrossPlatformApprovalEventResponse> getCrossPlatformApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CROSSPLATFORMAPPROVAL_EVENT, transactionReceipt);
        ArrayList<CrossPlatformApprovalEventResponse> responses = new ArrayList<CrossPlatformApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CrossPlatformApprovalEventResponse typedResponse = new CrossPlatformApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CrossPlatformApprovalEventResponse> crossPlatformApprovalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CrossPlatformApprovalEventResponse>() {
            @Override
            public CrossPlatformApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CROSSPLATFORMAPPROVAL_EVENT, log);
                CrossPlatformApprovalEventResponse typedResponse = new CrossPlatformApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CrossPlatformApprovalEventResponse> crossPlatformApprovalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CROSSPLATFORMAPPROVAL_EVENT));
        return crossPlatformApprovalEventFlowable(filter);
    }

    public List<DelFunctionEventResponse> getDelFunctionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELFUNCTION_EVENT, transactionReceipt);
        ArrayList<DelFunctionEventResponse> responses = new ArrayList<DelFunctionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DelFunctionEventResponse typedResponse = new DelFunctionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DelFunctionEventResponse> delFunctionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DelFunctionEventResponse>() {
            @Override
            public DelFunctionEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DELFUNCTION_EVENT, log);
                DelFunctionEventResponse typedResponse = new DelFunctionEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DelFunctionEventResponse> delFunctionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELFUNCTION_EVENT));
        return delFunctionEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<SetSwitcherStateOfBatchEventResponse> getSetSwitcherStateOfBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETSWITCHERSTATEOFBATCH_EVENT, transactionReceipt);
        ArrayList<SetSwitcherStateOfBatchEventResponse> responses = new ArrayList<SetSwitcherStateOfBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetSwitcherStateOfBatchEventResponse typedResponse = new SetSwitcherStateOfBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.isOpen = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetSwitcherStateOfBatchEventResponse> setSwitcherStateOfBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetSwitcherStateOfBatchEventResponse>() {
            @Override
            public SetSwitcherStateOfBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETSWITCHERSTATEOFBATCH_EVENT, log);
                SetSwitcherStateOfBatchEventResponse typedResponse = new SetSwitcherStateOfBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.isOpen = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetSwitcherStateOfBatchEventResponse> setSwitcherStateOfBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETSWITCHERSTATEOFBATCH_EVENT));
        return setSwitcherStateOfBatchEventFlowable(filter);
    }

    public List<SetSwitcherStateOfPlatformEventResponse> getSetSwitcherStateOfPlatformEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETSWITCHERSTATEOFPLATFORM_EVENT, transactionReceipt);
        ArrayList<SetSwitcherStateOfPlatformEventResponse> responses = new ArrayList<SetSwitcherStateOfPlatformEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetSwitcherStateOfPlatformEventResponse typedResponse = new SetSwitcherStateOfPlatformEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.isOpen = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetSwitcherStateOfPlatformEventResponse> setSwitcherStateOfPlatformEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetSwitcherStateOfPlatformEventResponse>() {
            @Override
            public SetSwitcherStateOfPlatformEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETSWITCHERSTATEOFPLATFORM_EVENT, log);
                SetSwitcherStateOfPlatformEventResponse typedResponse = new SetSwitcherStateOfPlatformEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.isOpen = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetSwitcherStateOfPlatformEventResponse> setSwitcherStateOfPlatformEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETSWITCHERSTATEOFPLATFORM_EVENT));
        return setSwitcherStateOfPlatformEventFlowable(filter);
    }

    public List<SyncPlatformDIDEventResponse> getSyncPlatformDIDEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SYNCPLATFORMDID_EVENT, transactionReceipt);
        ArrayList<SyncPlatformDIDEventResponse> responses = new ArrayList<SyncPlatformDIDEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SyncPlatformDIDEventResponse typedResponse = new SyncPlatformDIDEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.dids = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SyncPlatformDIDEventResponse> syncPlatformDIDEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SyncPlatformDIDEventResponse>() {
            @Override
            public SyncPlatformDIDEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SYNCPLATFORMDID_EVENT, log);
                SyncPlatformDIDEventResponse typedResponse = new SyncPlatformDIDEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.dids = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SyncPlatformDIDEventResponse> syncPlatformDIDEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SYNCPLATFORMDID_EVENT));
        return syncPlatformDIDEventFlowable(filter);
    }

    public List<UpdateAccountStateEventResponse> getUpdateAccountStateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEACCOUNTSTATE_EVENT, transactionReceipt);
        ArrayList<UpdateAccountStateEventResponse> responses = new ArrayList<UpdateAccountStateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateAccountStateEventResponse typedResponse = new UpdateAccountStateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateAccountStateEventResponse> updateAccountStateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateAccountStateEventResponse>() {
            @Override
            public UpdateAccountStateEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEACCOUNTSTATE_EVENT, log);
                UpdateAccountStateEventResponse typedResponse = new UpdateAccountStateEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateAccountStateEventResponse> updateAccountStateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEACCOUNTSTATE_EVENT));
        return updateAccountStateEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<Boolean> accountAvailable(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACCOUNTAVAILABLE, 
                Arrays.<Type>asList(new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addAccountByOperator(String account, String accountName, String accountDID, String leaderDID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDACCOUNTBYOPERATOR, 
                Arrays.<Type>asList(new Address(160, account),
                new Utf8String(accountName),
                new Utf8String(accountDID),
                new Utf8String(leaderDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addAccountByPlatform(String account, String accountName, String accountDID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDACCOUNTBYPLATFORM, 
                Arrays.<Type>asList(new Address(160, account),
                new Utf8String(accountName),
                new Utf8String(accountDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addBatchAccountByOperator(List<String> accounts, List<String> accountNames, List<String> accountDIDs, List<String> leaderDIDs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDBATCHACCOUNTBYOPERATOR, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, Address.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(accountNames, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(accountDIDs, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(leaderDIDs, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addBatchAccountByPlatform(List<String> accounts, List<String> accountNames, List<String> accountDIDs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDBATCHACCOUNTBYPLATFORM, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, Address.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(accountNames, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(accountDIDs, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addFunction(BigInteger role, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDFUNCTION, 
                Arrays.<Type>asList(new Uint8(role),
                new Address(160, contractAddress),
                new Bytes4(sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addOperator(String operator, String accountName, String accountDID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDOPERATOR, 
                Arrays.<Type>asList(new Address(160, operator),
                new Utf8String(accountName),
                new Utf8String(accountDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> checkAvailableAndRole(String account, BigInteger role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHECKAVAILABLEANDROLE, 
                Arrays.<Type>asList(new Address(160, account),
                new Uint8(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> crossPlatformApproval(String from, String to, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSPLATFORMAPPROVAL, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> crossPlatformCheck(String from, String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CROSSPLATFORMCHECK, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> delFunction(BigInteger role, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELFUNCTION, 
                Arrays.<Type>asList(new Uint8(role),
                new Address(160, contractAddress),
                new Bytes4(sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>> getAccount(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACCOUNT, 
                Arrays.<Type>asList(new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getFunctions(BigInteger role, String contractAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFUNCTIONS, 
                Arrays.<Type>asList(new Uint8(role),
                new Address(160, contractAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes4>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> hasFunctionPermission(String account, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASFUNCTIONPERMISSION, 
                Arrays.<Type>asList(new Address(160, account),
                new Address(160, contractAddress),
                new Bytes4(sig)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> onePlatformCheck(String acc1, String acc2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ONEPLATFORMCHECK, 
                Arrays.<Type>asList(new Address(160, acc1),
                new Address(160, acc2)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSwitcherStateOfBatch(Boolean isOpen) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSWITCHERSTATEOFBATCH, 
                Arrays.<Type>asList(new Bool(isOpen)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSwitcherStateOfPlatform(Boolean isOpen) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSWITCHERSTATEOFPLATFORM, 
                Arrays.<Type>asList(new Bool(isOpen)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> switcherStateOfPlatform() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SWITCHERSTATEOFPLATFORM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> syncPlatformDID(List<String> dids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SYNCPLATFORMDID, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(dids, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAccountState(String account, BigInteger state, Boolean changePlatformState) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEACCOUNTSTATE, 
                Arrays.<Type>asList(new Address(160, account),
                new Uint8(state),
                new Bool(changePlatformState)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETO, 
                Arrays.<Type>asList(new Address(160, newImplementation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new Address(160, newImplementation),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Authority load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Authority(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Authority load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Authority(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Authority load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Authority(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Authority load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Authority(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Authority> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Authority.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Authority> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Authority.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Authority> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Authority.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Authority> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Authority.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AddAccountEventResponse extends BaseEventResponse {
        public String caller;

        public String account;
    }

    public static class AddBatchAccountEventResponse extends BaseEventResponse {
        public String operator;

        public List<String> accounts;
    }

    public static class AddFunctionEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger role;

        public String contractAddress;

        public byte[] sig;
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class CrossPlatformApprovalEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public Boolean approved;
    }

    public static class DelFunctionEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger role;

        public String contractAddress;

        public byte[] sig;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SetSwitcherStateOfBatchEventResponse extends BaseEventResponse {
        public String operator;

        public Boolean isOpen;
    }

    public static class SetSwitcherStateOfPlatformEventResponse extends BaseEventResponse {
        public String operator;

        public Boolean isOpen;
    }

    public static class SyncPlatformDIDEventResponse extends BaseEventResponse {
        public String operator;

        public List<String> dids;
    }

    public static class UpdateAccountStateEventResponse extends BaseEventResponse {
        public String account;

        public BigInteger platformState;

        public BigInteger operatorState;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }
}
