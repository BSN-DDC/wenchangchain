package ai.bianjie.ddc.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Authority extends Contract {
    public static final String BINARY = "60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b5060805161346762000100600039600081816107b4015281816107f401528181610ae50152610b2501526134676000f3fe6080604052600436106101145760003560e01c806395c2a8d9116100a0578063e3f00c3a11610064578063e3f00c3a146102e2578063ed5cad6414610302578063f2fde38b14610322578063faf3c53f14610342578063fbcbc0f11461036257600080fd5b806395c2a8d914610235578063a6ff8f0c14610255578063b50f1a5e14610275578063bac7ad52146102a2578063e1576897146102c257600080fd5b8063470cf0e0116100e7578063470cf0e0146101b05780634f1ef286146101d0578063715018a6146101e35780638129fc1c146101f85780638da5cb5b1461020d57600080fd5b806301843caa1461011957806305e847fb1461014e5780633659cfe6146101705780633a723d1714610190575b600080fd5b34801561012557600080fd5b50610139610134366004612c46565b610395565b60405190151581526020015b60405180910390f35b34801561015a57600080fd5b5061016e610169366004612c89565b6105a3565b005b34801561017c57600080fd5b5061016e61018b366004612ccc565b6107a9565b34801561019c57600080fd5b506101396101ab366004612c46565b610872565b3480156101bc57600080fd5b506101396101cb366004612cff565b610a0f565b61016e6101de366004612dc5565b610ada565b3480156101ef57600080fd5b5061016e610b94565b34801561020457600080fd5b5061016e610bca565b34801561021957600080fd5b506033546040516001600160a01b039091168152602001610145565b34801561024157600080fd5b50610139610250366004612ccc565b610c45565b34801561026157600080fd5b5061016e610270366004612e36565b610c72565b34801561028157600080fd5b50610295610290366004612e54565b610e25565b6040516101459190612e70565b3480156102ae57600080fd5b5061016e6102bd366004612ebe565b610f14565b3480156102ce57600080fd5b5061016e6102dd366004612f10565b611338565b3480156102ee57600080fd5b5061016e6102fd366004612f84565b6113d5565b34801561030e57600080fd5b5061013961031d36600461301d565b611422565b34801561032e57600080fd5b5061016e61033d366004612ccc565b61147d565b34801561034e57600080fd5b5061016e61035d366004612e36565b611515565b34801561036e57600080fd5b5061038261037d366004612ccc565b6118d0565b60405161014597969594939291906130cd565b6000806103a184611c34565b90506103b08160200151611f55565b6103b981611f73565b60006103c484611c34565b90506103d38160200151611f55565b6103dc81611f73565b6001826040015160028111156103f4576103f46130a3565b1480156104165750600181604001516002811115610414576104146130a3565b145b15610480576060808201519083015161042e91611fdd565b80156104775750815160405160cc9161044691613158565b908152604051908190036020018120825190916104639190613158565b9081526040519081900360200190205460ff165b9250505061059d565b600182604001516002811115610498576104986130a3565b1480156104ba57506002816040015160028111156104b8576104b86130a3565b145b156104f057815160405160cc916104d091613158565b908152602001604051809103902081606001516040516104639190613158565b600282604001516002811115610508576105086130a3565b14801561052a5750600181604001516002811115610528576105286130a3565b145b156105435760cc82606001516040516104469190613158565b60028260400151600281111561055b5761055b6130a3565b14801561057d575060028160400151600281111561057b5761057b6130a3565b145b156105965760cc82606001516040516104d09190613158565b6000925050505b92915050565b6105ad600061207e565b6105b6836120e6565b6105bf826120e6565b60006105ca84611c34565b90506105d98160200151611f55565b6105e281611f73565b60006105ed84611c34565b90506105fc8160200151611f55565b61060581611f73565b60018260400151600281111561061d5761061d6130a3565b14801561063f575060018160400151600281111561063d5761063d6130a3565b145b6106a05760405162461bcd60e51b815260206004820152602760248201527f417574686f726974793a426f7468206d7573742062652060706c6174666f726d6044820152666020726f6c657360c81b60648201526084015b60405180910390fd5b805182516106ad91611fdd565b1561070f5760405162461bcd60e51b815260206004820152602c60248201527f417574686f726974793a426f746820617265207468652073616d6520706c617460448201526b199bdc9b481858d8dbdd5b9d60a21b6064820152608401610697565b8260cc83600001516040516107249190613158565b908152604051908190036020018120835190916107419190613158565b90815260405160209181900382018120805460ff19169315159390931790925584151582526001600160a01b0386811692908816917f944da3aaddcf895695572377f73f4b10c3822d1ea336c5d59f364f3e5e1b121891015b60405180910390a35050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107f25760405162461bcd60e51b815260040161069790613174565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610824612135565b6001600160a01b03161461084a5760405162461bcd60e51b8152600401610697906131c0565b61085381612163565b6040805160008082526020820190925261086f9183919061218d565b50565b60008061087e84611c34565b905061088d8160200151611f55565b61089681611f73565b60006108a184611c34565b90506108b08160200151611f55565b6108b981611f73565b6001826040015160028111156108d1576108d16130a3565b1480156108f357506001816040015160028111156108f1576108f16130a3565b145b1561091f576060808201519083015161090b91611fdd565b801561047757508051825161047791611fdd565b600182604001516002811115610937576109376130a3565b1480156109595750600281604001516002811115610957576109576130a3565b145b1561096e576060810151825161047791611fdd565b600282604001516002811115610986576109866130a3565b1480156109a857506001816040015160028111156109a6576109a66130a3565b145b156109bd576060820151815161047791611fdd565b6002826040015160028111156109d5576109d56130a3565b1480156109f757506002816040015160028111156109f5576109f56130a3565b145b15610596576060808201519083015161047791611fdd565b600080610a1b85611c34565b9050610a2a8160200151611f55565b610a3381611f73565b610a3c846120e6565b610a45836122d1565b6000610a55826040015186612320565b9050600060ca600084604001516002811115610a7357610a736130a3565b6002811115610a8457610a846130a3565b81526020019081526020016000208281548110610aa357610aa361320c565b600091825260208083206001600160e01b0319891684526002600390930201919091019052604090205411925050505b9392505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b235760405162461bcd60e51b815260040161069790613174565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b55612135565b6001600160a01b031614610b7b5760405162461bcd60e51b8152600401610697906131c0565b610b8482612163565b610b908282600161218d565b5050565b6033546001600160a01b03163314610bbe5760405162461bcd60e51b815260040161069790613222565b610bc860006123fd565b565b600054610100900460ff1680610be3575060005460ff16155b610bff5760405162461bcd60e51b815260040161069790613257565b600054610100900460ff16158015610c21576000805461ffff19166101011790555b610c2961244f565b610c316124b6565b801561086f576000805461ff001916905550565b600080610c5183611c34565b9050610c608160200151611f55565b610c6981611f73565b50600192915050565b610c7c600061207e565b610c85826120e6565b610c8e816122d1565b600060ca6000856002811115610ca657610ca66130a3565b6002811115610cb757610cb76130a3565b8152602001908152602001600020610ccf8585612320565b81548110610cdf57610cdf61320c565b600091825260208083206001600160e01b0319861684526002600390930201918201905260409091205490915080610d595760405162461bcd60e51b815260206004820152601f60248201527f417574686f726974793a66756e6320646f6573206e6f74206578697374732e006044820152606401610697565b6000600180840190610d6b90846132bb565b81548110610d7b57610d7b61320c565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550816002016000846001600160e01b0319166001600160e01b031916815260200190815260200160002060009055846002811115610dea57610dea6130a3565b336001600160a01b03167ffd7321e06212c7e20cb40ffe695d160cb669329e947bbcab975e41e985153417868660405161079a9291906132d2565b6060610e30826120e6565b60ca6000846002811115610e4657610e466130a3565b6002811115610e5757610e576130a3565b8152602001908152602001600020610e6f8484612320565b81548110610e7f57610e7f61320c565b9060005260206000209060030201600101805480602002602001604051908101604052809291908181526020018280548015610f0757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610ec95790505b5050505050905092915050565b600080610f208561251d565b91509150610f2d81611f73565b610f3782826125e2565b80610f575750600081604001516002811115610f5557610f556130a3565b145b610fb55760405162461bcd60e51b815260206004820152602960248201527f417574686f726974793a204163636f756e74277320726f6c6520646f6573206e6044820152686f74206d617463682160b81b6064820152608401610697565b600281604001516002811115610fcd57610fcd6130a3565b14156110135760405162461bcd60e51b8152602060048201526015602482015274417574686f726974793a2077726f6e6720726f6c6560581b6044820152606401610697565b60008160400151600281111561102b5761102b6130a3565b14156111525782156110ae57836001811115611049576110496130a3565b8260800151600181111561105f5761105f6130a3565b141561107d5760405162461bcd60e51b8152600401610697906132f5565b60808201846001811115611093576110936130a3565b908160018111156110a6576110a66130a3565b9052506111e3565b8360018111156110c0576110c06130a3565b8260a0015160018111156110d6576110d66130a3565b141561113c5760405162461bcd60e51b815260206004820152602f60248201527f417574686f726974793a204f70657261746f72537461746520646f65736e277460448201526e206e65656420746f206368616e676560881b6064820152608401610697565b60a08201846001811115611093576110936130a3565b60018160400151600281111561116a5761116a6130a3565b14156111e357836001811115611182576111826130a3565b82608001516001811115611198576111986130a3565b14156111b65760405162461bcd60e51b8152600401610697906132f5565b608082018460018111156111cc576111cc6130a3565b908160018111156111df576111df6130a3565b9052505b6001600160a01b038516600090815260c960209081526040909120835180518593611212928492910190612b56565b50602082810151805161122b9260018501920190612b56565b5060408201518160020160006101000a81548160ff02191690836002811115611256576112566130a3565b021790555060608201518051611276916003840191602090910190612b56565b50608082015160048201805460ff191660018381811115611299576112996130a3565b021790555060a082015160048201805461ff0019166101008360018111156112c3576112c36130a3565b021790555060c082015180516112e3916005840191602090910190612b56565b505050608082015160a08301516040516001600160a01b038816927f3a99d1f905eb66fd0850dd6e2156668b6ae1f16f41cd49dd7c6d4fb5147f784f9261132992613344565b60405180910390a25050505050565b6033546001600160a01b031633146113625760405162461bcd60e51b815260040161069790613222565b80516113b05760405162461bcd60e51b815260206004820152601f60248201527f417574686f726974793a204449442063616e6e6f7420626520656d70747921006044820152606401610697565b6113b9826125f6565b6113c283612654565b6113d08382838560006126ba565b505050565b6113df600061207e565b6113e8836125f6565b6113f184612654565b805160029061140e57600061140533611c34565b51925060019150505b61141b85848487856126ba565b5050505050565b60008061142e84611c34565b905061143d8160200151611f55565b61144681611f73565b826002811115611458576114586130a3565b60ff1681604001516002811115611471576114716130a3565b60ff1614949350505050565b6033546001600160a01b031633146114a75760405162461bcd60e51b815260040161069790613222565b6001600160a01b03811661150c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610697565b61086f816123fd565b61151f600061207e565b611528826120e6565b611531816122d1565b60008060cb600086600281111561154a5761154a6130a3565b600281111561155b5761155b6130a3565b8152602080820192909252604090810160009081206001600160a01b038816825290925290205490508061175857600060ca60008760028111156115a1576115a16130a3565b60028111156115b2576115b26130a3565b815260200190815260200160002080549050905060ca60008760028111156115dc576115dc6130a3565b60028111156115ed576115ed6130a3565b81526020810191909152604001600090812080546001018155815260ca9087600281111561161d5761161d6130a3565b600281111561162e5761162e6130a3565b8152602001908152602001600020818154811061164d5761164d61320c565b9060005260206000209060030201925060ca6000876002811115611673576116736130a3565b6002811115611684576116846130a3565b81526020019081526020016000208054905060cb60008860028111156116ac576116ac6130a3565b60028111156116bd576116bd6130a3565b8152602080820192909252604090810160009081206001600160a01b038a168083529084528282209490945586546001600160a01b03191690931786556001808701805491820181558085528385206008830401805463ffffffff60079094166004026101000a938402191660e08b901c9390930292909217909155546001600160e01b031988168452600287019092529091205550611883565b60ca600086600281111561176e5761176e6130a3565b600281111561177f5761177f6130a3565b815260200190815260200160002060018261179a91906132bb565b815481106117aa576117aa61320c565b600091825260208083206001600160e01b03198716845260026003909302019182019052604090912054909250156118245760405162461bcd60e51b815260206004820152601f60248201527f417574686f726974793a2066756e6320616c7265616479206578697374732e006044820152606401610697565b600182810180549182018155600081815260208082206008850401805463ffffffff60079096166004026101000a958602191660e089901c959095029490941790935590546001600160e01b0319861682526002850190925260409020555b846002811115611895576118956130a3565b336001600160a01b03167fd2925d5c000f95a189be5c6c90c0dc14f33c077900241eb3e7c0a287d914e650868660405161079a9291906132d2565b606080600060606000806060600060c960008a6001600160a01b03166001600160a01b031681526020019081526020016000206040518060e001604052908160008201805461191e9061335f565b80601f016020809104026020016040519081016040528092919081815260200182805461194a9061335f565b80156119975780601f1061196c57610100808354040283529160200191611997565b820191906000526020600020905b81548152906001019060200180831161197a57829003601f168201915b505050505081526020016001820180546119b09061335f565b80601f01602080910402602001604051908101604052809291908181526020018280546119dc9061335f565b8015611a295780601f106119fe57610100808354040283529160200191611a29565b820191906000526020600020905b815481529060010190602001808311611a0c57829003601f168201915b505050918352505060028281015460209092019160ff1690811115611a5057611a506130a3565b6002811115611a6157611a616130a3565b8152602001600382018054611a759061335f565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa19061335f565b8015611aee5780601f10611ac357610100808354040283529160200191611aee565b820191906000526020600020905b815481529060010190602001808311611ad157829003601f168201915b5050509183525050600482015460209091019060ff166001811115611b1557611b156130a3565b6001811115611b2657611b266130a3565b81526020016004820160019054906101000a900460ff166001811115611b4e57611b4e6130a3565b6001811115611b5f57611b5f6130a3565b8152602001600582018054611b739061335f565b80601f0160208091040260200160405190810160405280929190818152602001828054611b9f9061335f565b8015611bec5780601f10611bc157610100808354040283529160200191611bec565b820191906000526020600020905b815481529060010190602001808311611bcf57829003601f168201915b5050505050815250509050806000015181602001518260400151836060015184608001518560a001518660c00151975097509750975097509750975050919395979092949650565b611c3c612bda565b611c45826120e6565b6001600160a01b038216600090815260c9602052604090819020815160e08101909252805482908290611c779061335f565b80601f0160208091040260200160405190810160405280929190818152602001828054611ca39061335f565b8015611cf05780601f10611cc557610100808354040283529160200191611cf0565b820191906000526020600020905b815481529060010190602001808311611cd357829003601f168201915b50505050508152602001600182018054611d099061335f565b80601f0160208091040260200160405190810160405280929190818152602001828054611d359061335f565b8015611d825780601f10611d5757610100808354040283529160200191611d82565b820191906000526020600020905b815481529060010190602001808311611d6557829003601f168201915b505050918352505060028281015460209092019160ff1690811115611da957611da96130a3565b6002811115611dba57611dba6130a3565b8152602001600382018054611dce9061335f565b80601f0160208091040260200160405190810160405280929190818152602001828054611dfa9061335f565b8015611e475780601f10611e1c57610100808354040283529160200191611e47565b820191906000526020600020905b815481529060010190602001808311611e2a57829003601f168201915b5050509183525050600482015460209091019060ff166001811115611e6e57611e6e6130a3565b6001811115611e7f57611e7f6130a3565b81526020016004820160019054906101000a900460ff166001811115611ea757611ea76130a3565b6001811115611eb857611eb86130a3565b8152602001600582018054611ecc9061335f565b80601f0160208091040260200160405190810160405280929190818152602001828054611ef89061335f565b8015611f455780601f10611f1a57610100808354040283529160200191611f45565b820191906000526020600020905b815481529060010190602001808311611f2857829003601f168201915b5050505050815250509050919050565b805161086f5760405162461bcd60e51b81526004016106979061339a565b611f858160a001518260800151612849565b61086f5760405162461bcd60e51b815260206004820152602360248201527f417574686f726974793a204163636f756e7420686173206265656e2066726f7a604482015262656e2160e81b6064820152608401610697565b805182516000918491849114611ff85760009250505061059d565b815160005b81811015612071578281815181106120175761201761320c565b602001015160f81c60f81b6001600160f81b03191684828151811061203e5761203e61320c565b01602001516001600160f81b0319161461205f57600094505050505061059d565b80612069816133dc565b915050611ffd565b5060019695505050505050565b6120883382611422565b61086f5760405162461bcd60e51b815260206004820152602960248201527f417574686f726974793a6e6f742061206f70657261746f7220726f6c65206f7260448201526808191a5cd8589b195960ba1b6064820152608401610697565b6001600160a01b03811661086f5760405162461bcd60e51b8152602060048201526016602482015275417574686f726974793a7a65726f206164647265737360501b6044820152606401610697565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6033546001600160a01b0316331461086f5760405162461bcd60e51b815260040161069790613222565b6000612197612135565b90506121a284612883565b6000835111806121af5750815b156121c0576121be8484612928565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661141b57805460ff191660011781556040516001600160a01b038316602482015261223f90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612928565b50805460ff19168155612250612135565b6001600160a01b0316826001600160a01b0316146122c85760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610697565b61141b85612a13565b6001600160e01b0319811661086f5760405162461bcd60e51b8152602060048201526015602482015274417574686f726974793a696e76616c69642073696760581b6044820152606401610697565b60008060cb6000856002811115612339576123396130a3565b600281111561234a5761234a6130a3565b81526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020549050600081116123ea5760405162461bcd60e51b815260206004820152603360248201527f417574686f726974793a60726f6c6560206f722060636f6e74726163744164646044820152721c995cdcd808191bd95cdb89dd08195e1a5cdd606a1b6064820152608401610697565b6123f56001826132bb565b949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680612468575060005460ff16155b6124845760405162461bcd60e51b815260040161069790613257565b600054610100900460ff161580156124a6576000805461ffff19166101011790555b6124ae612a53565b610c31612abd565b600054610100900460ff16806124cf575060005460ff16155b6124eb5760405162461bcd60e51b815260040161069790613257565b600054610100900460ff1615801561250d576000805461ffff19166101011790555b612515612a53565b610c31612a53565b612525612bda565b61252d612bda565b600061253884611c34565b9050806020015151600014156125605760405162461bcd60e51b81526004016106979061339a565b600061256b33611c34565b9050806020015151600014156125d85760405162461bcd60e51b815260206004820152602c60248201527f417574686f726974793a204c65616465724163636f756e74496e666f20646f6560448201526b73206e6f742065786973742160a01b6064820152608401610697565b9094909350915050565b80516060830151600091610ad39190611fdd565b805161086f5760405162461bcd60e51b815260206004820152602760248201527f417574686f726974793a204163636f756e744e616d652063616e6e6f7420626560448201526620656d7074792160c81b6064820152608401610697565b61265d81611c34565b60200151511561086f5760405162461bcd60e51b815260206004820152602260248201527f417574686f726974793a204163636f756e7420616c7265616479206578697374604482015261732160f01b6064820152608401610697565b6040518060e001604052808581526020018381526020018260028111156126e3576126e36130a3565b815260208101859052604001600181526020016001815260408051602081810183526000808352938101919091526001600160a01b038916835260c98152912082518051919261273892849290910190612b56565b5060208281015180516127519260018501920190612b56565b5060408201518160020160006101000a81548160ff0219169083600281111561277c5761277c6130a3565b02179055506060820151805161279c916003840191602090910190612b56565b50608082015160048201805460ff1916600183818111156127bf576127bf6130a3565b021790555060a082015160048201805461ff0019166101008360018111156127e9576127e96130a3565b021790555060c08201518051612809916005840191602090910190612b56565b50506040516001600160a01b038716915033907fd246aa772c5574778b374ed1202c22bac9c87a04fd3624439c2642fa6ca6217190600090a35050505050565b6000600183600181111561285f5761285f6130a3565b148015610ad35750600182600181111561287b5761287b6130a3565b149392505050565b803b6128e75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610697565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6129875760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610697565b600080846001600160a01b0316846040516129a29190613158565b600060405180830381855af49150503d80600081146129dd576040519150601f19603f3d011682016040523d82523d6000602084013e6129e2565b606091505b5091509150612a0a828260405180606001604052806027815260200161340b60279139612b1d565b95945050505050565b612a1c81612883565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680612a6c575060005460ff16155b612a885760405162461bcd60e51b815260040161069790613257565b600054610100900460ff16158015610c31576000805461ffff1916610101179055801561086f576000805461ff001916905550565b600054610100900460ff1680612ad6575060005460ff16155b612af25760405162461bcd60e51b815260040161069790613257565b600054610100900460ff16158015612b14576000805461ffff19166101011790555b610c31336123fd565b60608315612b2c575081610ad3565b825115612b3c5782518084602001fd5b8160405162461bcd60e51b815260040161069791906133f7565b828054612b629061335f565b90600052602060002090601f016020900481019282612b845760008555612bca565b82601f10612b9d57805160ff1916838001178555612bca565b82800160010185558215612bca579182015b82811115612bca578251825591602001919060010190612baf565b50612bd6929150612c15565b5090565b6040805160e0810182526060808252602082015290810160008152606060208201526040016000815260200160008152602001606081525090565b5b80821115612bd65760008155600101612c16565b80356001600160a01b0381168114612c4157600080fd5b919050565b60008060408385031215612c5957600080fd5b612c6283612c2a565b9150612c7060208401612c2a565b90509250929050565b80358015158114612c4157600080fd5b600080600060608486031215612c9e57600080fd5b612ca784612c2a565b9250612cb560208501612c2a565b9150612cc360408501612c79565b90509250925092565b600060208284031215612cde57600080fd5b610ad382612c2a565b80356001600160e01b031981168114612c4157600080fd5b600080600060608486031215612d1457600080fd5b612d1d84612c2a565b9250612d2b60208501612c2a565b9150612cc360408501612ce7565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612d6a57612d6a612d39565b604051601f8501601f19908116603f01168101908282118183101715612d9257612d92612d39565b81604052809350858152868686011115612dab57600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215612dd857600080fd5b612de183612c2a565b9150602083013567ffffffffffffffff811115612dfd57600080fd5b8301601f81018513612e0e57600080fd5b612e1d85823560208401612d4f565b9150509250929050565b803560038110612c4157600080fd5b600080600060608486031215612e4b57600080fd5b612d1d84612e27565b60008060408385031215612e6757600080fd5b612c6283612e27565b6020808252825182820181905260009190848201906040850190845b81811015612eb25783516001600160e01b03191683529284019291840191600101612e8c565b50909695505050505050565b600080600060608486031215612ed357600080fd5b612edc84612c2a565b9250602084013560028110612cb557600080fd5b600082601f830112612f0157600080fd5b610ad383833560208501612d4f565b600080600060608486031215612f2557600080fd5b612f2e84612c2a565b9250602084013567ffffffffffffffff80821115612f4b57600080fd5b612f5787838801612ef0565b93506040860135915080821115612f6d57600080fd5b50612f7a86828701612ef0565b9150509250925092565b60008060008060808587031215612f9a57600080fd5b612fa385612c2a565b9350602085013567ffffffffffffffff80821115612fc057600080fd5b612fcc88838901612ef0565b94506040870135915080821115612fe257600080fd5b612fee88838901612ef0565b9350606087013591508082111561300457600080fd5b5061301187828801612ef0565b91505092959194509250565b6000806040838503121561303057600080fd5b61303983612c2a565b9150612c7060208401612e27565b60005b8381101561306257818101518382015260200161304a565b83811115613071576000848401525b50505050565b6000815180845261308f816020860160208601613047565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b600281106130c9576130c96130a3565b9052565b60e0815260006130e060e083018a613077565b82810360208401526130f2818a613077565b905060038810613104576131046130a3565b876040840152828103606084015261311c8188613077565b905061312b60808401876130b9565b61313860a08401866130b9565b82810360c084015261314a8185613077565b9a9950505050505050505050565b6000825161316a818460208701613047565b9190910192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156132cd576132cd6132a5565b500390565b6001600160a01b039290921682526001600160e01b031916602082015260400190565b6020808252602f908201527f417574686f726974793a20506c6174666f726d537461746520646f65736e277460408201526e206e65656420746f206368616e676560881b606082015260800190565b6040810161335282856130b9565b610ad360208301846130b9565b600181811c9082168061337357607f821691505b6020821081141561339457634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526022908201527f417574686f726974793a204163636f756e7420646f6573206e6f742065786973604082015261742160f01b606082015260800190565b60006000198214156133f0576133f06132a5565b5060010190565b602081526000610ad3602083018461307756fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220afc00c01ad9ab6827ffbde2e153aa2cf54e0880cabc5d75ea7bfa3911d6adde164736f6c634300080b0033";

    public static final String FUNC_ACCOUNTAVAILABLE = "accountAvailable";

    public static final String FUNC_ADDACCOUNTBYOPERATOR = "addAccountByOperator";

    public static final String FUNC_ADDFUNCTION = "addFunction";

    public static final String FUNC_ADDOPERATOR = "addOperator";

    public static final String FUNC_CHECKAVAILABLEANDROLE = "checkAvailableAndRole";

    public static final String FUNC_CROSSPLATFORMAPPROVAL = "crossPlatformApproval";

    public static final String FUNC_CROSSPLATFORMCHECK = "crossPlatformCheck";

    public static final String FUNC_DELFUNCTION = "delFunction";

    public static final String FUNC_GETACCOUNT = "getAccount";

    public static final String FUNC_GETFUNCTIONS = "getFunctions";

    public static final String FUNC_HASFUNCTIONPERMISSION = "hasFunctionPermission";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ONEPLATFORMCHECK = "onePlatformCheck";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEACCOUNTSTATE = "updateAccountState";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event ADDACCOUNT_EVENT = new Event("AddAccount",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));

    public static final Event ADDFUNCTION_EVENT = new Event("AddFunction",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint8>(true) {
            }, new TypeReference<Address>() {
            }, new TypeReference<Bytes4>() {
            }));

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }));

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));

    public static final Event CROSSPLATFORMAPPROVAL_EVENT = new Event("CrossPlatformApproval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Bool>() {
            }));

    public static final Event DELFUNCTION_EVENT = new Event("DelFunction",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint8>(true) {
            }, new TypeReference<Address>() {
            }, new TypeReference<Bytes4>() {
            }));

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));

    public static final Event UPDATEACCOUNTSTATE_EVENT = new Event("UpdateAccountState",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint8>() {
            }, new TypeReference<Uint8>() {
            }));

    public static final Event UPGRADED_EVENT = new Event("Upgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));

    protected Authority(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    protected Authority(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AddAccountEventResponse> getAddAccountEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDACCOUNT_EVENT, transactionReceipt);
        ArrayList<AddAccountEventResponse> responses = new ArrayList<AddAccountEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddAccountEventResponse typedResponse = new AddAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddAccountEventResponse> addAccountEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(ADDACCOUNT_EVENT, log);
            AddAccountEventResponse typedResponse = new AddAccountEventResponse();
            typedResponse.log = log;
            typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            return typedResponse;
        });
    }

    public Flowable<AddAccountEventResponse> addAccountEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDACCOUNT_EVENT));
        return addAccountEventFlowable(filter);
    }

    public List<AddFunctionEventResponse> getAddFunctionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDFUNCTION_EVENT, transactionReceipt);
        ArrayList<AddFunctionEventResponse> responses = new ArrayList<AddFunctionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddFunctionEventResponse typedResponse = new AddFunctionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddFunctionEventResponse> addFunctionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(ADDFUNCTION_EVENT, log);
            AddFunctionEventResponse typedResponse = new AddFunctionEventResponse();
            typedResponse.log = log;
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            return typedResponse;
        });
    }

    public Flowable<AddFunctionEventResponse> addFunctionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDFUNCTION_EVENT));
        return addFunctionEventFlowable(filter);
    }

    public List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINCHANGED_EVENT, log);
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = log;
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            return typedResponse;
        });
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = log;
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            return typedResponse;
        });
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public List<CrossPlatformApprovalEventResponse> getCrossPlatformApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CROSSPLATFORMAPPROVAL_EVENT, transactionReceipt);
        ArrayList<CrossPlatformApprovalEventResponse> responses = new ArrayList<CrossPlatformApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CrossPlatformApprovalEventResponse typedResponse = new CrossPlatformApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CrossPlatformApprovalEventResponse> crossPlatformApprovalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(CROSSPLATFORMAPPROVAL_EVENT, log);
            CrossPlatformApprovalEventResponse typedResponse = new CrossPlatformApprovalEventResponse();
            typedResponse.log = log;
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            return typedResponse;
        });
    }

    public Flowable<CrossPlatformApprovalEventResponse> crossPlatformApprovalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CROSSPLATFORMAPPROVAL_EVENT));
        return crossPlatformApprovalEventFlowable(filter);
    }

    public List<DelFunctionEventResponse> getDelFunctionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELFUNCTION_EVENT, transactionReceipt);
        ArrayList<DelFunctionEventResponse> responses = new ArrayList<DelFunctionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DelFunctionEventResponse typedResponse = new DelFunctionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DelFunctionEventResponse> delFunctionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(DELFUNCTION_EVENT, log);
            DelFunctionEventResponse typedResponse = new DelFunctionEventResponse();
            typedResponse.log = log;
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sig = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            return typedResponse;
        });
    }

    public Flowable<DelFunctionEventResponse> delFunctionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELFUNCTION_EVENT));
        return delFunctionEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = log;
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            return typedResponse;
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<UpdateAccountStateEventResponse> getUpdateAccountStateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEACCOUNTSTATE_EVENT, transactionReceipt);
        ArrayList<UpdateAccountStateEventResponse> responses = new ArrayList<UpdateAccountStateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateAccountStateEventResponse typedResponse = new UpdateAccountStateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateAccountStateEventResponse> updateAccountStateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEACCOUNTSTATE_EVENT, log);
            UpdateAccountStateEventResponse typedResponse = new UpdateAccountStateEventResponse();
            typedResponse.log = log;
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.platformState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorState = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            return typedResponse;
        });
    }

    public Flowable<UpdateAccountStateEventResponse> updateAccountStateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEACCOUNTSTATE_EVENT));
        return updateAccountStateEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> {
            EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = log;
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            return typedResponse;
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<Boolean> accountAvailable(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACCOUNTAVAILABLE,
                Arrays.<Type>asList(new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addAccountByOperator(String account, String accountName, String accountDID, String leaderDID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDACCOUNTBYOPERATOR,
                Arrays.<Type>asList(new Address(160, account),
                        new Utf8String(accountName),
                        new Utf8String(accountDID),
                        new Utf8String(leaderDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addFunction(BigInteger role, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDFUNCTION,
                Arrays.<Type>asList(new Uint8(role),
                        new Address(160, contractAddress),
                        new Bytes4(sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addOperator(String operator, String accountName, String accountDID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDOPERATOR,
                Arrays.<Type>asList(new Address(160, operator),
                        new Utf8String(accountName),
                        new Utf8String(accountDID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> checkAvailableAndRole(String account, BigInteger role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHECKAVAILABLEANDROLE,
                Arrays.<Type>asList(new Address(160, account),
                        new Uint8(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> crossPlatformApproval(String from, String to, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CROSSPLATFORMAPPROVAL,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> crossPlatformCheck(String from, String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CROSSPLATFORMCHECK,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> delFunction(BigInteger role, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELFUNCTION,
                Arrays.<Type>asList(new Uint8(role),
                        new Address(160, contractAddress),
                        new Bytes4(sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>> getAccount(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACCOUNT,
                Arrays.<Type>asList(new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Utf8String>() {
                }));
        return new RemoteFunctionCall<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, String, BigInteger, BigInteger, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getFunctions(BigInteger role, String contractAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFUNCTIONS,
                Arrays.<Type>asList(new Uint8(role),
                        new Address(160, contractAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes4>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> hasFunctionPermission(String account, String contractAddress, byte[] sig) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASFUNCTIONPERMISSION,
                Arrays.<Type>asList(new Address(160, account),
                        new Address(160, contractAddress),
                        new Bytes4(sig)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> onePlatformCheck(String acc1, String acc2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ONEPLATFORMCHECK,
                Arrays.<Type>asList(new Address(160, acc1),
                        new Address(160, acc2)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAccountState(String account, BigInteger state, Boolean changePlatformState) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEACCOUNTSTATE,
                Arrays.<Type>asList(new Address(160, account),
                        new Uint8(state),
                        new Bool(changePlatformState)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETO,
                Arrays.<Type>asList(new Address(160, newImplementation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETOANDCALL,
                Arrays.<Type>asList(new Address(160, newImplementation),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static Authority load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Authority(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Authority load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Authority(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Authority> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Authority.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Authority> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Authority.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    public static class AddAccountEventResponse extends BaseEventResponse {
        public String caller;

        public String account;
    }

    public static class AddFunctionEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger role;

        public String contractAddress;

        public byte[] sig;
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class CrossPlatformApprovalEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public Boolean approved;
    }

    public static class DelFunctionEventResponse extends BaseEventResponse {
        public String operator;

        public BigInteger role;

        public String contractAddress;

        public byte[] sig;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class UpdateAccountStateEventResponse extends BaseEventResponse {
        public String account;

        public BigInteger platformState;

        public BigInteger operatorState;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }
}
