package ai.bianjie.ddc.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DDC1155 extends Contract {
    public static final String BINARY = "60a0604052306080523480156200001557600080fd5b50600054610100900460ff168062000030575060005460ff16155b620000985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000bb576000805461ffff19166101011790555b8015620000ce576000805461ff00191690555b5060805161312a62000100600039600081816106a8015281816106e8015281816108b001526108f0015261312a6000f3fe60806040526004361061013f5760003560e01c80638129fc1c116100b6578063c5837d821161006f578063c5837d8214610388578063d302b0dc146103a8578063d7a78db8146103c8578063e985e9c5146103e8578063f242432a14610408578063f2fde38b1461042857600080fd5b80638129fc1c146102cb5780638da5cb5b146102e05780639dc29fac14610308578063a22cb46514610328578063b2dc5dc314610348578063b55bc6171461036857600080fd5b806344d891df1161010857806344d891df146102165780634e1273f4146102365780634f1ef286146102635780636357035514610276578063685e824714610296578063715018a6146102b657600080fd5b8062fdd58e1461014457806301ffc9a714610177578063293ec97c146101a75780632eb2c2d6146101d45780633659cfe6146101f6575b600080fd5b34801561015057600080fd5b5061016461015f366004612571565b610448565b6040519081526020015b60405180910390f35b34801561018357600080fd5b506101976101923660046125b1565b6104a1565b604051901515815260200161016e565b3480156101b357600080fd5b506101c76101c23660046125ce565b6104d8565b60405161016e919061263f565b3480156101e057600080fd5b506101f46101ef36600461279b565b610581565b005b34801561020257600080fd5b506101f4610211366004612844565b61069d565b34801561022257600080fd5b506101f4610231366004612844565b610766565b34801561024257600080fd5b5061025661025136600461285f565b6107bc565b60405161016e9190612964565b6101f4610271366004612977565b6108a5565b34801561028257600080fd5b506101f46102913660046129ba565b61095f565b3480156102a257600080fd5b506101f46102b1366004612acf565b610af0565b3480156102c257600080fd5b506101f4610c1e565b3480156102d757600080fd5b506101f4610c54565b3480156102ec57600080fd5b506097546040516001600160a01b03909116815260200161016e565b34801561031457600080fd5b506101f4610323366004612571565b610cd7565b34801561033457600080fd5b506101f4610343366004612b33565b610d40565b34801561035457600080fd5b506101f4610363366004612b6a565b610e2a565b34801561037457600080fd5b506101f4610383366004612bad565b610f19565b34801561039457600080fd5b506101f46103a3366004612844565b610fab565b3480156103b457600080fd5b506101f46103c33660046125ce565b611001565b3480156103d457600080fd5b506101f46103e33660046125ce565b611076565b3480156103f457600080fd5b50610197610403366004612c1e565b6110e9565b34801561041457600080fd5b506101f4610423366004612c51565b611156565b34801561043457600080fd5b506101f4610443366004612844565b611204565b60006001600160a01b0383166104795760405162461bcd60e51b815260040161047090612cb5565b60405180910390fd5b50600090815260fb602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b0319821663e43ae70960e01b14806104d257506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606104e38261129c565b600082815260fd6020526040902080546104fc90612ce3565b80601f016020809104026020016040519081016040528092919081815260200182805461052890612ce3565b80156105755780601f1061054a57610100808354040283529160200191610575565b820191906000526020600020905b81548152906001019060200180831161055857829003601f168201915b50505050509050919050565b6105896112fa565b610592856113ce565b61059b846113ce565b6105a585856114af565b6105af8533611532565b81518351146105d05760405162461bcd60e51b815260040161047090612d1e565b60005b835181101561062a5761061a86868684815181106105f3576105f3612d55565b602002602001015186858151811061060d5761060d612d55565b60200260200101516115a4565b61062381612d81565b90506105d3565b50836001600160a01b0316856001600160a01b03166106463390565b6001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610680929190612d9c565b60405180910390a461069633868686868661160a565b5050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156106e65760405162461bcd60e51b815260040161047090612dc1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661071861179e565b6001600160a01b03161461073e5760405162461bcd60e51b815260040161047090612e0d565b610747816117cc565b60408051600080825260208201909252610763918391906117f6565b50565b6097546001600160a01b031633146107905760405162461bcd60e51b815260040161047090612e59565b6107998161193a565b61010180546001600160a01b0319166001600160a01b0392909216919091179055565b606081518351146107df5760405162461bcd60e51b815260040161047090612d1e565b600083516001600160401b038111156107fa576107fa612652565b604051908082528060200260200182016040528015610823578160200160208202803683370190505b50905060005b835181101561089d5761086e85828151811061084757610847612d55565b602002602001015185838151811061086157610861612d55565b6020026020010151610448565b82828151811061088057610880612d55565b60209081029190910101528061089581612d81565b915050610829565b509392505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108ee5760405162461bcd60e51b815260040161047090612dc1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661092061179e565b6001600160a01b0316146109465760405162461bcd60e51b815260040161047090612e0d565b61094f826117cc565b61095b828260016117f6565b5050565b6109676112fa565b610970846113ce565b61097b335b856119b0565b815183511461099c5760405162461bcd60e51b815260040161047090612d1e565b6101005483516000906001600160401b038111156109bc576109bc612652565b6040519080825280602002602001820160405280156109e5578160200160208202803683370190505b50905060005b8551811015610a89576109ff600184612e8e565b925082828281518110610a1457610a14612d55565b602002602001018181525050610a7787838381518110610a3657610a36612d55565b6020026020010151888481518110610a5057610a50612d55565b6020026020010151888581518110610a6a57610a6a612d55565b6020026020010151611a10565b80610a8181612d81565b9150506109eb565b506001600160a01b0386166000336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8489604051610ad1929190612d9c565b60405180910390a4610ae83360008884898861160a565b505050505050565b610af86112fa565b610b0182611a9f565b610b0b8333611532565b8051610b595760405162461bcd60e51b815260206004820152601860248201527f444443313135353a43616e206e6f7420626520656d70747900000000000000006044820152606401610470565b600082815260fd602052604090208054610b7290612ce3565b159050610bc15760405162461bcd60e51b815260206004820152601b60248201527f444443313135353a616c726561647920696e697469616c697a656400000000006044820152606401610470565b600082815260fd602090815260409091208251610be0928401906124bc565b50817fee1bb82f380189104b74a7647d26f2f35679780e816626ffcaec7cafb7288e4682604051610c11919061263f565b60405180910390a2505050565b6097546001600160a01b03163314610c485760405162461bcd60e51b815260040161047090612e59565b610c526000611aff565b565b600054610100900460ff1680610c6d575060005460ff16155b610c895760405162461bcd60e51b815260040161047090612ea6565b600054610100900460ff16158015610cab576000805461ffff19166101011790555b610cb3611b51565b610cbb611bb0565b610cc3611c17565b8015610763576000805461ff001916905550565b610cdf6112fa565b610ce98233611532565b610cf38282611c76565b60408051828152600060208201819052916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050565b610d486112fa565b610d51826113ce565b610d5b33836119b0565b336001600160a01b0383161415610dbe5760405162461bcd60e51b815260206004820152602160248201527f444443313135353a73657474696e6720617070726f76616c20666f722073656c6044820152603360f91b6064820152608401610470565b33600081815260fc602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610e326112fa565b610e3c8233611532565b600081516001600160401b03811115610e5757610e57612652565b604051908082528060200260200182016040528015610e80578160200160208202803683370190505b50905060005b8251811015610ec457610eb284848381518110610ea557610ea5612d55565b6020026020010151611c76565b80610ebc81612d81565b915050610e86565b5060006001600160a01b038416336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8585604051610f0c929190612d9c565b60405180910390a4505050565b610f216112fa565b610f2a846113ce565b610f3333610975565b6000610100546001610f459190612e8e565b9050610f5385828686611a10565b60408051828152602081018690526001600160a01b0387169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461069633600087848887611cef565b6097546001600160a01b03163314610fd55760405162461bcd60e51b815260040161047090612e59565b610fde8161193a565b61010280546001600160a01b0319166001600160a01b0392909216919091179055565b6110096112fa565b611011611dda565b61101a81611ea9565b600081815260ff60205260409020805460ff19169055336001600160a01b03167faddb66f781fad31382e12b8ad189f90d41b9590625a6736ef67a2792f094874f8260405161106b91815260200190565b60405180910390a250565b61107e6112fa565b611086611dda565b61108f81611a9f565b600081815260ff60205260409020805460ff191660011790556110af3390565b6001600160a01b03167f027b0995c9aa454830a50ece99b9507432deb5f7ff0173efc4429282c1710a368260405161106b91815260200190565b60006001600160a01b0383161580159061110b57506001600160a01b03821615155b6111275760405162461bcd60e51b815260040161047090612cb5565b506001600160a01b03918216600090815260fc6020908152604080832093909416825291909152205460ff1690565b61115e6112fa565b611167856113ce565b611170846113ce565b61117a85856114af565b6111848533611532565b611190858585856115a4565b836001600160a01b0316856001600160a01b03166111ab3390565b6001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6286866040516111ee929190918252602082015260400190565b60405180910390a4610696338686868686611cef565b6097546001600160a01b0316331461122e5760405162461bcd60e51b815260040161047090612e59565b6001600160a01b0381166112935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610470565b61076381611aff565b600081815260fe602052604090205460ff166107635760405162461bcd60e51b815260206004820152601760248201527f444443313135353a6e6f6e6578697374656e74206464630000000000000000006044820152606401610470565b610102546001600160a01b031663470cf0e0336040516001600160e01b031960e084901b811682526001600160a01b0392909216600482015230602482015260003590911660448201526064016020604051808303816000875af1158015611366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138a9190612ef4565b610c525760405162461bcd60e51b815260206004820152601560248201527422222198989a9a9d3737903832b936b4b9b9b4b7b760591b6044820152606401610470565b6001600160a01b0381166113f45760405162461bcd60e51b815260040161047090612cb5565b610102546040516395c2a8d960e01b81526001600160a01b038381166004830152909116906395c2a8d990602401602060405180830381865afa15801561143f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114639190612ef4565b6107635760405162461bcd60e51b815260206004820152601f60248201527f444443313135353a6e6f74206120617661696c61626c65206163636f756e74006044820152606401610470565b6114b98282611f11565b806114c957506114c98282611f91565b61095b5760405162461bcd60e51b815260206004820152603460248201527f444443313135353a4f6e6c79206f6e6520706c6174666f726d206f722063726f6044820152731cdccb5c1b185d199bdc9b48185c1c1c9bdd985b60621b6064820152608401610470565b61153c82826110e9565b806115585750816001600160a01b0316816001600160a01b0316145b61095b5760405162461bcd60e51b815260206004820152601e60248201527f444443313135353a6e6f74206f776e6572206e6f7220617070726f76656400006044820152606401610470565b6115ad82611a9f565b6115b8848383611fcc565b600082815260fb602090815260408083206001600160a01b03888116855292528083208054858103909155918616835282208054919284926115fb908490612e8e565b90915550610696905083612073565b6001600160a01b0384163b15610ae85760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061164e9089908990889088908890600401612f11565b6020604051808303816000875af1925050508015611689575060408051601f3d908101601f1916820190925261168691810190612f6f565b60015b61173557611695612f8c565b806308c379a014156116cf57506116aa612fa8565b806116b557506116d1565b8060405162461bcd60e51b8152600401610470919061263f565b505b60405162461bcd60e51b815260206004820152603360248201527f444443313135353a7472616e7366657220746f206e6f6e20455243313135355260448201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b6064820152608401610470565b6001600160e01b0319811663bc197c8160e01b146117955760405162461bcd60e51b815260206004820181905260248201527f444443313135353a4552433131353552656365697665722072656a65637465646044820152606401610470565b50505050505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6097546001600160a01b031633146107635760405162461bcd60e51b815260040161047090612e59565b600061180061179e565b905061180b846120ef565b6000835111806118185750815b15611829576118278484612194565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661069657805460ff191660011781556040516001600160a01b03831660248201526118a890869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612194565b50805460ff191681556118b961179e565b6001600160a01b0316826001600160a01b0316146119315760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610470565b6106968561227f565b6001600160a01b0381166119605760405162461bcd60e51b815260040161047090612cb5565b6001600160a01b0381163b6107635760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9b9bdd08184818dbdb9d1c9858dd60521b6044820152606401610470565b6119ba8282611f11565b61095b5760405162461bcd60e51b815260206004820152602160248201527f444443313135353a6f6e6c79206f6e207468652073616d6520706c6174666f726044820152606d60f81b6064820152608401610470565b611a1a83836122bf565b600083815260fb602090815260408083206001600160a01b038816845290915281208054849290611a4c908490612e8e565b9091555050600083815260fd602090815260409091208251611a70928401906124bc565b50600083815260fe60205260409020805460ff19166001179055610100839055611a9983612073565b50505050565b611aa88161129c565b600081815260ff602081905260409091205416156107635760405162461bcd60e51b8152602060048201526014602482015273444443313135353a64697361626c65642064646360601b6044820152606401610470565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680611b6a575060005460ff16155b611b865760405162461bcd60e51b815260040161047090612ea6565b600054610100900460ff16158015611ba8576000805461ffff19166101011790555b610cc3612360565b600054610100900460ff1680611bc9575060005460ff16155b611be55760405162461bcd60e51b815260040161047090612ea6565b600054610100900460ff16158015611c07576000805461ffff19166101011790555b611c0f612360565b610cc36123ca565b600054610100900460ff1680611c30575060005460ff16155b611c4c5760405162461bcd60e51b815260040161047090612ea6565b600054610100900460ff16158015611c6e576000805461ffff19166101011790555b611ba8612360565b6001600160a01b038216611c9c5760405162461bcd60e51b815260040161047090612cb5565b611ca58161129c565b611caf828261242a565b600081815260fb602090815260408083206001600160a01b0386168452825280832083905583835260ff9091529020805460ff1916905561095b81612073565b6001600160a01b0384163b15610ae85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d339089908990889088908890600401613031565b6020604051808303816000875af1925050508015611d6e575060408051601f3d908101601f19168201909252611d6b91810190612f6f565b60015b611d7a57611695612f8c565b6001600160e01b0319811663f23a6e6160e01b146117955760405162461bcd60e51b815260206004820181905260248201527f444443313135353a4552433131353552656365697665722072656a65637465646044820152606401610470565b610102546001600160a01b031663ed5cad643360006040518363ffffffff1660e01b8152600401611e0c929190613076565b602060405180830381865afa158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4d9190612ef4565b610c525760405162461bcd60e51b815260206004820152602760248201527f444443313135353a6e6f742061206f70657261746f7220726f6c65206f7220646044820152661a5cd8589b195960ca1b6064820152608401610470565b611eb28161129c565b600081815260ff6020819052604090912054166107635760405162461bcd60e51b815260206004820152601860248201527f444443313135353a6e6f6e2d64697361626c65642064646300000000000000006044820152606401610470565b61010254604051633a723d1760e01b81526001600160a01b03848116600483015283811660248301526000921690633a723d17906044015b602060405180830381865afa158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a9190612ef4565b9392505050565b6101025460405162c21e5560e11b81526001600160a01b038481166004830152838116602483015260009216906301843caa90604401611f49565b600081116120155760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9a5b9d985b1a5908185b5bdd5b9d60521b6044820152606401610470565b806120208484610448565b101561206e5760405162461bcd60e51b815260206004820152601c60248201527f444443313135353a696e73756666696369656e742062616c616e6365000000006044820152606401610470565b505050565b610101546001600160a01b031663ef18e3c9336040516001600160e01b031960e084901b811682526001600160a01b03929092166004820152600035909116602482015260448101849052606401600060405180830381600087803b1580156120db57600080fd5b505af1158015610696573d6000803e3d6000fd5b803b6121535760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610470565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6121f35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610470565b600080846001600160a01b03168460405161220e91906130b1565b600060405180830381855af49150503d8060008114612249576040519150601f19603f3d011682016040523d82523d6000602084013e61224e565b606091505b509150915061227682826040518060600160405280602781526020016130ce60279139612483565b95945050505050565b612288816120ef565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600081116123085760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e9a5b9d985b1a5908185b5bdd5b9d60521b6044820152606401610470565b600082815260fe602052604090205460ff161561095b5760405162461bcd60e51b8152602060048201526016602482015275111110cc4c4d4d4e985b1c9958591e481b5a5b9d195960521b6044820152606401610470565b600054610100900460ff1680612379575060005460ff16155b6123955760405162461bcd60e51b815260040161047090612ea6565b600054610100900460ff16158015610cc3576000805461ffff19166101011790558015610763576000805461ff001916905550565b600054610100900460ff16806123e3575060005460ff16155b6123ff5760405162461bcd60e51b815260040161047090612ea6565b600054610100900460ff16158015612421576000805461ffff19166101011790555b610cc333611aff565b60006124368383610448565b1161095b5760405162461bcd60e51b815260206004820152601c60248201527f444443313135353a696e73756666696369656e742062616c616e6365000000006044820152606401610470565b60608315612492575081611f8a565b8251156124a25782518084602001fd5b8160405162461bcd60e51b8152600401610470919061263f565b8280546124c890612ce3565b90600052602060002090601f0160209004810192826124ea5760008555612530565b82601f1061250357805160ff1916838001178555612530565b82800160010185558215612530579182015b82811115612530578251825591602001919060010190612515565b5061253c929150612540565b5090565b5b8082111561253c5760008155600101612541565b80356001600160a01b038116811461256c57600080fd5b919050565b6000806040838503121561258457600080fd5b61258d83612555565b946020939093013593505050565b6001600160e01b03198116811461076357600080fd5b6000602082840312156125c357600080fd5b8135611f8a8161259b565b6000602082840312156125e057600080fd5b5035919050565b60005b838110156126025781810151838201526020016125ea565b83811115611a995750506000910152565b6000815180845261262b8160208601602086016125e7565b601f01601f19169290920160200192915050565b602081526000611f8a6020830184612613565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561268d5761268d612652565b6040525050565b60006001600160401b038211156126ad576126ad612652565b5060051b60200190565b600082601f8301126126c857600080fd5b813560206126d582612694565b6040516126e28282612668565b83815260059390931b850182019282810191508684111561270257600080fd5b8286015b8481101561271d5780358352918301918301612706565b509695505050505050565b600082601f83011261273957600080fd5b81356001600160401b0381111561275257612752612652565b604051612769601f8301601f191660200182612668565b81815284602083860101111561277e57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156127b357600080fd5b6127bc86612555565b94506127ca60208701612555565b935060408601356001600160401b03808211156127e657600080fd5b6127f289838a016126b7565b9450606088013591508082111561280857600080fd5b61281489838a016126b7565b9350608088013591508082111561282a57600080fd5b5061283788828901612728565b9150509295509295909350565b60006020828403121561285657600080fd5b611f8a82612555565b6000806040838503121561287257600080fd5b82356001600160401b038082111561288957600080fd5b818501915085601f83011261289d57600080fd5b813560206128aa82612694565b6040516128b78282612668565b83815260059390931b85018201928281019150898411156128d757600080fd5b948201945b838610156128fc576128ed86612555565b825294820194908201906128dc565b9650508601359250508082111561291257600080fd5b5061291f858286016126b7565b9150509250929050565b600081518084526020808501945080840160005b838110156129595781518752958201959082019060010161293d565b509495945050505050565b602081526000611f8a6020830184612929565b6000806040838503121561298a57600080fd5b61299383612555565b915060208301356001600160401b038111156129ae57600080fd5b61291f85828601612728565b600080600080608085870312156129d057600080fd5b6129d985612555565b93506020808601356001600160401b03808211156129f657600080fd5b612a0289838a016126b7565b95506040880135915080821115612a1857600080fd5b818801915088601f830112612a2c57600080fd5b8135612a3781612694565b604051612a448282612668565b82815260059290921b840185019185810191508b831115612a6457600080fd5b8585015b83811015612a9c57803585811115612a805760008081fd5b612a8e8e89838a0101612728565b845250918601918601612a68565b50965050506060880135925080831115612ab557600080fd5b5050612ac387828801612728565b91505092959194509250565b600080600060608486031215612ae457600080fd5b612aed84612555565b92506020840135915060408401356001600160401b03811115612b0f57600080fd5b612b1b86828701612728565b9150509250925092565b801515811461076357600080fd5b60008060408385031215612b4657600080fd5b612b4f83612555565b91506020830135612b5f81612b25565b809150509250929050565b60008060408385031215612b7d57600080fd5b612b8683612555565b915060208301356001600160401b03811115612ba157600080fd5b61291f858286016126b7565b60008060008060808587031215612bc357600080fd5b612bcc85612555565b93506020850135925060408501356001600160401b0380821115612bef57600080fd5b612bfb88838901612728565b93506060870135915080821115612c1157600080fd5b50612ac387828801612728565b60008060408385031215612c3157600080fd5b612c3a83612555565b9150612c4860208401612555565b90509250929050565b600080600080600060a08688031215612c6957600080fd5b612c7286612555565b9450612c8060208701612555565b9350604086013592506060860135915060808601356001600160401b03811115612ca957600080fd5b61283788828901612728565b602080825260149082015273444443313135353a7a65726f206164647265737360601b604082015260600190565b600181811c90821680612cf757607f821691505b60208210811415612d1857634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526017908201527f444443313135353a6c656e677468206d69736d61746368000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d9557612d95612d6b565b5060010190565b604081526000612daf6040830185612929565b82810360208401526122768185612929565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115612ea157612ea1612d6b565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215612f0657600080fd5b8151611f8a81612b25565b6001600160a01b0386811682528516602082015260a060408201819052600090612f3d90830186612929565b8281036060840152612f4f8186612929565b90508281036080840152612f638185612613565b98975050505050505050565b600060208284031215612f8157600080fd5b8151611f8a8161259b565b600060033d1115612fa55760046000803e5060005160e01c5b90565b600060443d1015612fb65790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612fe557505050505090565b8285019150815181811115612ffd5750505050505090565b843d87010160208285010111156130175750505050505090565b61302660208286010187612668565b509095945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061306b90830184612613565b979650505050505050565b6001600160a01b038316815260408101600383106130a457634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b600082516130c38184602087016125e7565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209997c17ff0408b6b3a1ed804678e97a6b55ba6bf3c3b72baa18238dbd9b546ba64736f6c634300080b0033";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_DDCURI = "ddcURI";

    public static final String FUNC_FREEZE = "freeze";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFEMINT = "safeMint";

    public static final String FUNC_SAFEMINTBATCH = "safeMintBatch";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETAUTHORITYPROXYADDRESS = "setAuthorityProxyAddress";

    public static final String FUNC_SETCHARGEPROXYADDRESS = "setChargeProxyAddress";

    public static final String FUNC_SETURI = "setURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNFREEZE = "unFreeze";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Bool>() {
            }));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    public static final Event ENTERBLACKLIST_EVENT = new Event("EnterBlacklist",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event EXITBLACKLIST_EVENT = new Event("ExitBlacklist",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event SETURI_EVENT = new Event("SetURI",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Utf8String>() {
            }));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    @Deprecated
    protected DDC1155(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DDC1155(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DDC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DDC1155(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AdminChangedEventResponse>() {
            @Override
            public AdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINCHANGED_EVENT, log);
                AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BeaconUpgradedEventResponse>() {
            @Override
            public BeaconUpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
                BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public List<EnterBlacklistEventResponse> getEnterBlacklistEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ENTERBLACKLIST_EVENT, transactionReceipt);
        ArrayList<EnterBlacklistEventResponse> responses = new ArrayList<EnterBlacklistEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            EnterBlacklistEventResponse typedResponse = new EnterBlacklistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EnterBlacklistEventResponse> enterBlacklistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EnterBlacklistEventResponse>() {
            @Override
            public EnterBlacklistEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ENTERBLACKLIST_EVENT, log);
                EnterBlacklistEventResponse typedResponse = new EnterBlacklistEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EnterBlacklistEventResponse> enterBlacklistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ENTERBLACKLIST_EVENT));
        return enterBlacklistEventFlowable(filter);
    }

    public List<ExitBlacklistEventResponse> getExitBlacklistEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXITBLACKLIST_EVENT, transactionReceipt);
        ArrayList<ExitBlacklistEventResponse> responses = new ArrayList<ExitBlacklistEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExitBlacklistEventResponse typedResponse = new ExitBlacklistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExitBlacklistEventResponse> exitBlacklistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExitBlacklistEventResponse>() {
            @Override
            public ExitBlacklistEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXITBLACKLIST_EVENT, log);
                ExitBlacklistEventResponse typedResponse = new ExitBlacklistEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExitBlacklistEventResponse> exitBlacklistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXITBLACKLIST_EVENT));
        return exitBlacklistEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<SetURIEventResponse> getSetURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETURI_EVENT, transactionReceipt);
        ArrayList<SetURIEventResponse> responses = new ArrayList<SetURIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetURIEventResponse typedResponse = new SetURIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ddcId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ddcURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetURIEventResponse> setURIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetURIEventResponse>() {
            @Override
            public SetURIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETURI_EVENT, log);
                SetURIEventResponse typedResponse = new SetURIEventResponse();
                typedResponse.log = log;
                typedResponse.ddcId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ddcURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetURIEventResponse> setURIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETURI_EVENT));
        return setURIEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amounts = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ddcIds = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amounts = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ddcId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner, BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new Address(160, owner),
                        new Uint256(ddcId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> owners, List<BigInteger> ddcIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH,
                Arrays.<Type>asList(new DynamicArray<Address>(
                                Address.class,
                                org.web3j.abi.Utils.typeMap(owners, Address.class)),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burn(String owner, BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN,
                Arrays.<Type>asList(new Address(160, owner),
                        new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(String owner, List<BigInteger> ddcIds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH,
                Arrays.<Type>asList(new Address(160, owner),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> ddcURI(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DDCURI,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> freeze(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FREEZE,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new Address(160, owner),
                        new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ddcIds, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(ddcIds, Uint256.class)),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMint(String to, BigInteger amount, String _ddcURI, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINT,
                Arrays.<Type>asList(new Address(160, to),
                        new Uint256(amount),
                        new Utf8String(_ddcURI),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMintBatch(String to, List<BigInteger> amounts, List<String> ddcURIs, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINTBATCH,
                Arrays.<Type>asList(new Address(160, to),
                        new DynamicArray<Uint256>(
                                Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, Uint256.class)),
                        new DynamicArray<Utf8String>(
                                Utf8String.class,
                                org.web3j.abi.Utils.typeMap(ddcURIs, Utf8String.class)),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger ddcId, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new Uint256(ddcId),
                        new Uint256(amount),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new Address(160, operator),
                        new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAuthorityProxyAddress(String authorityProxyAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAUTHORITYPROXYADDRESS,
                Arrays.<Type>asList(new Address(160, authorityProxyAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setChargeProxyAddress(String chargeProxyAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCHARGEPROXYADDRESS,
                Arrays.<Type>asList(new Address(160, chargeProxyAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setURI(String owner, BigInteger ddcId, String ddcURI_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETURI,
                Arrays.<Type>asList(new Address(160, owner),
                        new Uint256(ddcId),
                        new Utf8String(ddcURI_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unFreeze(BigInteger ddcId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNFREEZE,
                Arrays.<Type>asList(new Uint256(ddcId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETO,
                Arrays.<Type>asList(new Address(160, newImplementation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETOANDCALL,
                Arrays.<Type>asList(new Address(160, newImplementation),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DDC1155 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DDC1155(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DDC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DDC1155(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DDC1155 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DDC1155(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DDC1155 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DDC1155(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DDC1155> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DDC1155.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<DDC1155> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DDC1155.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DDC1155> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DDC1155.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DDC1155> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DDC1155.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class EnterBlacklistEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger ddcId;
    }

    public static class ExitBlacklistEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger ddcId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SetURIEventResponse extends BaseEventResponse {
        public BigInteger ddcId;

        public String ddcURI;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ddcIds;

        public List<BigInteger> amounts;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger ddcId;

        public BigInteger amount;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }
}
